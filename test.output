Rules useless in parser due to conflicts

  121 non_loop_non_if_statement: assignment SEMICOLON
  122                          | initialization SEMICOLON
  123                          | declaration SEMICOLON
  124                          | function_call SEMICOLON
  125                          | block_structure SEMICOLON
  126                          | error_token SEMICOLON
  127                          | switch

  128 loop_statement: for
  129               | while
  130               | do_while


State 2 conflicts: 5 shift/reduce
State 38 conflicts: 4 reduce/reduce
State 44 conflicts: 4 reduce/reduce
State 46 conflicts: 4 reduce/reduce
State 47 conflicts: 4 reduce/reduce
State 62 conflicts: 4 reduce/reduce
State 64 conflicts: 10 shift/reduce, 5 reduce/reduce
State 105 conflicts: 10 shift/reduce, 5 reduce/reduce
State 119 conflicts: 9 shift/reduce, 5 reduce/reduce
State 123 conflicts: 21 reduce/reduce
State 124 conflicts: 21 reduce/reduce
State 125 conflicts: 21 reduce/reduce
State 126 conflicts: 21 reduce/reduce
State 127 conflicts: 10 shift/reduce, 5 reduce/reduce
State 150 conflicts: 10 shift/reduce, 5 reduce/reduce
State 162 conflicts: 21 reduce/reduce
State 163 conflicts: 21 reduce/reduce
State 164 conflicts: 21 reduce/reduce
State 165 conflicts: 21 reduce/reduce
State 166 conflicts: 21 reduce/reduce
State 167 conflicts: 21 reduce/reduce
State 197 conflicts: 9 shift/reduce, 5 reduce/reduce
State 220 conflicts: 10 shift/reduce, 5 reduce/reduce
State 234 conflicts: 10 shift/reduce, 5 reduce/reduce
State 239 conflicts: 1 shift/reduce
State 265 conflicts: 10 shift/reduce, 5 reduce/reduce
State 270 conflicts: 10 shift/reduce, 5 reduce/reduce
State 271 conflicts: 10 shift/reduce, 5 reduce/reduce
State 272 conflicts: 10 shift/reduce, 5 reduce/reduce
State 274 conflicts: 1 shift/reduce
State 298 conflicts: 10 shift/reduce, 5 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: declarations INT_TYPE_KEYWORD MAIN_KEYWORD OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    2 declarations: declarations function_declaration
    3             | declarations declaration SEMICOLON
    4             | declarations initialization SEMICOLON
    5             | /* empty */

    6 function_declaration: VOID_TYPE_KEYWORD IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE
    7                     | type IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    8 function_arguments: type_identifier
    9                   | function_arguments COMMA type_identifier
   10                   | /* empty */

   11 body: body statement
   12     | statement
   13     | /* empty */

   14 statement: if
   15          | non_loop_non_if_statement
   16          | loop_statement

   17 non_if_statement: assignment SEMICOLON
   18                 | initialization SEMICOLON
   19                 | declaration SEMICOLON
   20                 | function_call SEMICOLON
   21                 | for
   22                 | while
   23                 | do_while
   24                 | switch
   25                 | block_structure SEMICOLON
   26                 | error_token SEMICOLON

   27 error_token: UNRECOGNIZED_TOKEN
   28            | RESERVED_IDENTIFIER

   29 block_structure: OPENING_CURLY_BRACE body CLOSING_CURLY_BRACE

   30 const: CONST_KEYWORD
   31      | /* empty */

   32 declaration: const type_identifier
   33            | const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS

   34 assignment: IDENTIFIER ASSIGNMENT expr
   35           | IDENTIFIER ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS
   36           | IDENTIFIER OPENING_SQUARE_BRACKETS expr CLOSING_SQUARE_BRACKETS ASSIGNMENT expr

   37 initialization: const type_identifier ASSIGNMENT expr
   38               | const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

   39 function_call: IDENTIFIER OPENING_PARENTHESIS expr_list CLOSING_PARENTHESIS

   40 expr_list: expr
   41          | expr_list COMMA expr
   42          | /* empty */

   43 expr: arithmetic_expr
   44     | array_element
   45     | bool_expr
   46     | function_call
   47     | bitwise_expr
   48     | literal

   49 array_element: IDENTIFIER OPENING_SQUARE_BRACKETS expr CLOSING_SQUARE_BRACKETS

   50 arithmetic_expr: arithmetic_expr PLUS arithmetic_term
   51                | arithmetic_expr MINUS arithmetic_term
   52                | arithmetic_term

   53 arithmetic_term: arithmetic_term ASTRISK arithmetic_factor
   54                | arithmetic_term DIVIDE arithmetic_factor
   55                | arithmetic_term MODULO arithmetic_factor
   56                | arithmetic_factor

   57 arithmetic_factor: postfix_expr
   58                  | MINUS arithmetic_factor

   59 postfix_expr: primary_expr
   60             | primary_expr INCREMENT
   61             | primary_expr DECREMENT

   62 primary_expr: numeric_literal
   63             | array_element
   64             | function_call
   65             | IDENTIFIER
   66             | OPENING_PARENTHESIS arithmetic_expr CLOSING_PARENTHESIS

   67 bool_expr: logical_or_expression

   68 logical_or_expression: logical_or_expression OR_KEYWORD logical_and_expression
   69                      | logical_and_expression

   70 logical_and_expression: logical_and_expression AND_KEYWORD logical_not_expression
   71                       | logical_not_expression

   72 logical_not_expression: NOT_KEYWORD logical_not_expression
   73                       | BOOLEAN_LITERAL
   74                       | comparison_expr

   75 comparison_expr: arithmetic_expr EQUAL arithmetic_expr
   76                | arithmetic_expr NOT_EQUAL arithmetic_expr
   77                | arithmetic_expr LESS arithmetic_expr
   78                | arithmetic_expr GREATER arithmetic_expr
   79                | arithmetic_expr LESS_OR_EQUAL arithmetic_expr
   80                | arithmetic_expr GREATER_OR_EQUAL arithmetic_expr
   81                | arithmetic_expr

   82 bitwise_expr: bitwise_expr BITWISE_OR bitwise_xor_expr
   83             | bitwise_xor_expr

   84 bitwise_xor_expr: bitwise_xor_expr BITWISE_XOR bitwise_and_expr
   85                 | bitwise_and_expr

   86 bitwise_and_expr: bitwise_and_expr BITWISE_AND bitwise_not_expr
   87                 | bitwise_not_expr

   88 bitwise_not_expr: BITWISE_NOT bitwise_not_expr
   89                 | arithmetic_expr

   90 return: RETURN_KEYWORD expr SEMICOLON

   91 literal: numeric_literal
   92        | CHARACTER_LITERAL
   93        | STRING_LITERAL
   94        | BOOLEAN_LITERAL

   95 numeric_literal: INTEGER_LITERAL
   96                | FLOAT_LITERAL

   97 type_identifier: type IDENTIFIER

   98 type: INT_TYPE_KEYWORD
   99     | FLOAT_TYPE_KEYWORD
  100     | STRING_TYPE_KEYWORD
  101     | CHAR_TYPE_KEYWORD
  102     | BOOL_TYPE_KEYWORD

  103 if: matched_statement
  104   | unmatched_statement

  105 matched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD matched_statement
  106                  | non_if_statements

  107 non_if_statements: non_if_statement
  108                  | non_if_statements non_if_statement

  109 unmatched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS body
  110                    | IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD unmatched_statement

  111 if_in_loop: matched_if_in_loop
  112           | unmatched_if_in_loop

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block ELSE_KEYWORD matched_if_in_loop
  114                   | non_if_statements

  115 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block
  116                     | IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_if_in_loop ELSE_KEYWORD unmatched_if_in_loop

  117 loop_block: OPENING_CURLY_BRACE body break_or_continue CLOSING_CURLY_BRACE

  118 loop_body_statement: if_in_loop
  119                    | non_loop_non_if_statement
  120                    | loop_statement

  121 non_loop_non_if_statement: assignment SEMICOLON
  122                          | initialization SEMICOLON
  123                          | declaration SEMICOLON
  124                          | function_call SEMICOLON
  125                          | block_structure SEMICOLON
  126                          | error_token SEMICOLON
  127                          | switch

  128 loop_statement: for
  129               | while
  130               | do_while

  131 break_or_continue: BREAK_KEYWORD SEMICOLON
  132                  | CONTINUE_KEYWORD SEMICOLON
  133                  | /* empty */

  134 loop_body_statements: loop_body_statement
  135                     | loop_body_statements loop_body_statement

  136 for: FOR_KEYWORD OPENING_PARENTHESIS loop_start SEMICOLON bool_expr SEMICOLON assignment CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

  137 loop_start: assignment
  138           | initialization

  139 while: WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

  140 do_while: DO_KEYWORD OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS SEMICOLON

  141 switch: SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list CLOSING_CURLY_BRACE
  142       | SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list DEFAULT_KEYWORD COLON body CLOSING_CURLY_BRACE

  143 case_list: case_list case_statement
  144          | case_statement
  145          | /* empty */

  146 case_statement: CASE_KEYWORD IDENTIFIER COLON body
  147               | CASE_KEYWORD literal COLON body


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER_LITERAL (258) 33 38 95
FLOAT_LITERAL (259) 96
CHARACTER_LITERAL (260) 92
STRING_LITERAL (261) 93
BOOLEAN_LITERAL (262) 73 94
IDENTIFIER (263) 6 7 34 35 36 39 49 65 97 146
INT_TYPE_KEYWORD (264) 1 98
FLOAT_TYPE_KEYWORD (265) 99
STRING_TYPE_KEYWORD (266) 100
CHAR_TYPE_KEYWORD (267) 101
BOOL_TYPE_KEYWORD (268) 102
VOID_TYPE_KEYWORD (269) 6
IF_KEYWORD (270) 105 109 110 113 115 116
ELSE_KEYWORD (271) 105 110 113 116
FOR_KEYWORD (272) 136
WHILE_KEYWORD (273) 139 140
SWITCH_KEYWORD (274) 141 142
MAIN_KEYWORD (275) 1
DO_KEYWORD (276) 140
RETURN_KEYWORD (277) 90
CASE_KEYWORD (278) 146 147
CONST_KEYWORD (279) 30
BREAK_KEYWORD (280) 131
CONTINUE_KEYWORD (281) 132
DEFAULT_KEYWORD (282) 142
AND_KEYWORD (283) 70
OR_KEYWORD (284) 68
NOT_KEYWORD (285) 72
OPENING_CURLY_BRACE (286) 1 6 7 29 117 136 139 140 141 142
CLOSING_CURLY_BRACE (287) 1 6 7 29 117 136 139 140 141 142
OPENING_PARENTHESIS (288) 1 6 7 39 66 105 109 110 113 115 116 136 139
    140 141 142
CLOSING_PARENTHESIS (289) 1 6 7 39 66 105 109 110 113 115 116 136 139
    140 141 142
OPENING_SQUARE_BRACKETS (290) 33 35 36 38 49
CLOSING_SQUARE_BRACKETS (291) 33 35 36 38 49
COMMA (292) 9 41
ASTRISK (293) 53
PLUS (294) 50
MINUS (295) 51 58
DIVIDE (296) 54
MODULO (297) 55
INCREMENT (298) 60
DECREMENT (299) 61
ASSIGNMENT (300) 34 35 36 37 38
EQUAL (301) 75
NOT_EQUAL (302) 76
LESS_OR_EQUAL (303) 79
GREATER_OR_EQUAL (304) 80
LESS (305) 77
GREATER (306) 78
BITWISE_AND (307) 86
BITWISE_OR (308) 82
BITWISE_XOR (309) 84
BITWISE_NOT (310) 88
COLON (311) 142 146 147
SEMICOLON (312) 3 4 17 18 19 20 25 26 90 121 122 123 124 125 126 131
    132 136 140
UNRECOGNIZED_TOKEN (313) 27
RESERVED_IDENTIFIER (314) 28


Nonterminals, with rules where they appear

$accept (60)
    on left: 0
program (61)
    on left: 1, on right: 0
declarations (62)
    on left: 2 3 4 5, on right: 1 2 3 4
function_declaration (63)
    on left: 6 7, on right: 2
function_arguments (64)
    on left: 8 9 10, on right: 6 7 9
body (65)
    on left: 11 12 13, on right: 1 6 7 11 29 109 117 142 146 147
statement (66)
    on left: 14 15 16, on right: 11 12
non_if_statement (67)
    on left: 17 18 19 20 21 22 23 24 25 26, on right: 107 108
error_token (68)
    on left: 27 28, on right: 26 126
block_structure (69)
    on left: 29, on right: 25 125
const (70)
    on left: 30 31, on right: 32 33 37 38
declaration (71)
    on left: 32 33, on right: 3 19 123
assignment (72)
    on left: 34 35 36, on right: 17 121 136 137
initialization (73)
    on left: 37 38, on right: 4 18 122 138
function_call (74)
    on left: 39, on right: 20 46 64 124
expr_list (75)
    on left: 40 41 42, on right: 35 38 39 41
expr (76)
    on left: 43 44 45 46 47 48, on right: 34 36 37 40 41 49 90 141
    142
array_element (77)
    on left: 49, on right: 44 63
arithmetic_expr (78)
    on left: 50 51 52, on right: 43 50 51 66 75 76 77 78 79 80 81 89
arithmetic_term (79)
    on left: 53 54 55 56, on right: 50 51 52 53 54 55
arithmetic_factor (80)
    on left: 57 58, on right: 53 54 55 56 58
postfix_expr (81)
    on left: 59 60 61, on right: 57
primary_expr (82)
    on left: 62 63 64 65 66, on right: 59 60 61
bool_expr (83)
    on left: 67, on right: 45 105 109 110 113 115 116 136 139 140
logical_or_expression (84)
    on left: 68 69, on right: 67 68
logical_and_expression (85)
    on left: 70 71, on right: 68 69 70
logical_not_expression (86)
    on left: 72 73 74, on right: 70 71 72
comparison_expr (87)
    on left: 75 76 77 78 79 80 81, on right: 74
bitwise_expr (88)
    on left: 82 83, on right: 47 82
bitwise_xor_expr (89)
    on left: 84 85, on right: 82 83 84
bitwise_and_expr (90)
    on left: 86 87, on right: 84 85 86
bitwise_not_expr (91)
    on left: 88 89, on right: 86 87 88
return (92)
    on left: 90, on right: 1 6 7
literal (93)
    on left: 91 92 93 94, on right: 48 147
numeric_literal (94)
    on left: 95 96, on right: 62 91
type_identifier (95)
    on left: 97, on right: 8 9 32 33 37 38
type (96)
    on left: 98 99 100 101 102, on right: 7 97
if (97)
    on left: 103 104, on right: 14
matched_statement (98)
    on left: 105 106, on right: 103 105 110
non_if_statements (99)
    on left: 107 108, on right: 106 108 114
unmatched_statement (100)
    on left: 109 110, on right: 104 110
if_in_loop (101)
    on left: 111 112, on right: 118
matched_if_in_loop (102)
    on left: 113 114, on right: 111 113 116
unmatched_if_in_loop (103)
    on left: 115 116, on right: 112 116
loop_block (104)
    on left: 117, on right: 113 115
loop_body_statement (105)
    on left: 118 119 120, on right: 134 135
non_loop_non_if_statement (106)
    on left: 121 122 123 124 125 126 127, on right: 15 119
loop_statement (107)
    on left: 128 129 130, on right: 16 120
break_or_continue (108)
    on left: 131 132 133, on right: 117
loop_body_statements (109)
    on left: 134 135, on right: 135 136 139 140
for (110)
    on left: 136, on right: 21 128
loop_start (111)
    on left: 137 138, on right: 136
while (112)
    on left: 139, on right: 22 129
do_while (113)
    on left: 140, on right: 23 130
switch (114)
    on left: 141 142, on right: 24 127
case_list (115)
    on left: 143 144 145, on right: 141 142 143
case_statement (116)
    on left: 146 147, on right: 143 144


state 0

    0 $accept: . program $end

    $default  reduce using rule 5 (declarations)

    program       go to state 1
    declarations  go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: declarations . INT_TYPE_KEYWORD MAIN_KEYWORD OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE
    2 declarations: declarations . function_declaration
    3             | declarations . declaration SEMICOLON
    4             | declarations . initialization SEMICOLON

    INT_TYPE_KEYWORD     shift, and go to state 4
    FLOAT_TYPE_KEYWORD   shift, and go to state 5
    STRING_TYPE_KEYWORD  shift, and go to state 6
    CHAR_TYPE_KEYWORD    shift, and go to state 7
    BOOL_TYPE_KEYWORD    shift, and go to state 8
    VOID_TYPE_KEYWORD    shift, and go to state 9
    CONST_KEYWORD        shift, and go to state 10

    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]

    function_declaration  go to state 11
    const                 go to state 12
    declaration           go to state 13
    initialization        go to state 14
    type                  go to state 15


state 3

    0 $accept: program $end .

    $default  accept


state 4

    1 program: declarations INT_TYPE_KEYWORD . MAIN_KEYWORD OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE
   98 type: INT_TYPE_KEYWORD .

    MAIN_KEYWORD  shift, and go to state 16

    $default  reduce using rule 98 (type)


state 5

   99 type: FLOAT_TYPE_KEYWORD .

    $default  reduce using rule 99 (type)


state 6

  100 type: STRING_TYPE_KEYWORD .

    $default  reduce using rule 100 (type)


state 7

  101 type: CHAR_TYPE_KEYWORD .

    $default  reduce using rule 101 (type)


state 8

  102 type: BOOL_TYPE_KEYWORD .

    $default  reduce using rule 102 (type)


state 9

    6 function_declaration: VOID_TYPE_KEYWORD . IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    IDENTIFIER  shift, and go to state 17


state 10

   30 const: CONST_KEYWORD .

    $default  reduce using rule 30 (const)


state 11

    2 declarations: declarations function_declaration .

    $default  reduce using rule 2 (declarations)


state 12

   32 declaration: const . type_identifier
   33            | const . type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS
   37 initialization: const . type_identifier ASSIGNMENT expr
   38               | const . type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    INT_TYPE_KEYWORD     shift, and go to state 18
    FLOAT_TYPE_KEYWORD   shift, and go to state 5
    STRING_TYPE_KEYWORD  shift, and go to state 6
    CHAR_TYPE_KEYWORD    shift, and go to state 7
    BOOL_TYPE_KEYWORD    shift, and go to state 8

    type_identifier  go to state 19
    type             go to state 20


state 13

    3 declarations: declarations declaration . SEMICOLON

    SEMICOLON  shift, and go to state 21


state 14

    4 declarations: declarations initialization . SEMICOLON

    SEMICOLON  shift, and go to state 22


state 15

    7 function_declaration: type . IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    IDENTIFIER  shift, and go to state 23


state 16

    1 program: declarations INT_TYPE_KEYWORD MAIN_KEYWORD . OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    OPENING_PARENTHESIS  shift, and go to state 24


state 17

    6 function_declaration: VOID_TYPE_KEYWORD IDENTIFIER . OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    OPENING_PARENTHESIS  shift, and go to state 25


state 18

   98 type: INT_TYPE_KEYWORD .

    $default  reduce using rule 98 (type)


state 19

   32 declaration: const type_identifier .
   33            | const type_identifier . OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS
   37 initialization: const type_identifier . ASSIGNMENT expr
   38               | const type_identifier . OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    OPENING_SQUARE_BRACKETS  shift, and go to state 26
    ASSIGNMENT               shift, and go to state 27

    $default  reduce using rule 32 (declaration)


state 20

   97 type_identifier: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 28


state 21

    3 declarations: declarations declaration SEMICOLON .

    $default  reduce using rule 3 (declarations)


state 22

    4 declarations: declarations initialization SEMICOLON .

    $default  reduce using rule 4 (declarations)


state 23

    7 function_declaration: type IDENTIFIER . OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    OPENING_PARENTHESIS  shift, and go to state 29


state 24

    1 program: declarations INT_TYPE_KEYWORD MAIN_KEYWORD OPENING_PARENTHESIS . CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    CLOSING_PARENTHESIS  shift, and go to state 30


state 25

    6 function_declaration: VOID_TYPE_KEYWORD IDENTIFIER OPENING_PARENTHESIS . function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    INT_TYPE_KEYWORD     shift, and go to state 18
    FLOAT_TYPE_KEYWORD   shift, and go to state 5
    STRING_TYPE_KEYWORD  shift, and go to state 6
    CHAR_TYPE_KEYWORD    shift, and go to state 7
    BOOL_TYPE_KEYWORD    shift, and go to state 8

    $default  reduce using rule 10 (function_arguments)

    function_arguments  go to state 31
    type_identifier     go to state 32
    type                go to state 20


state 26

   33 declaration: const type_identifier OPENING_SQUARE_BRACKETS . INTEGER_LITERAL CLOSING_SQUARE_BRACKETS
   38 initialization: const type_identifier OPENING_SQUARE_BRACKETS . INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    INTEGER_LITERAL  shift, and go to state 33


state 27

   37 initialization: const type_identifier ASSIGNMENT . expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    CHARACTER_LITERAL    shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    BOOLEAN_LITERAL      shift, and go to state 38
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call           go to state 44
    expr                    go to state 45
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 28

   97 type_identifier: type IDENTIFIER .

    $default  reduce using rule 97 (type_identifier)


state 29

    7 function_declaration: type IDENTIFIER OPENING_PARENTHESIS . function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    INT_TYPE_KEYWORD     shift, and go to state 18
    FLOAT_TYPE_KEYWORD   shift, and go to state 5
    STRING_TYPE_KEYWORD  shift, and go to state 6
    CHAR_TYPE_KEYWORD    shift, and go to state 7
    BOOL_TYPE_KEYWORD    shift, and go to state 8

    $default  reduce using rule 10 (function_arguments)

    function_arguments  go to state 63
    type_identifier     go to state 32
    type                go to state 20


state 30

    1 program: declarations INT_TYPE_KEYWORD MAIN_KEYWORD OPENING_PARENTHESIS CLOSING_PARENTHESIS . OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    OPENING_CURLY_BRACE  shift, and go to state 64


state 31

    6 function_declaration: VOID_TYPE_KEYWORD IDENTIFIER OPENING_PARENTHESIS function_arguments . CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE
    9 function_arguments: function_arguments . COMMA type_identifier

    CLOSING_PARENTHESIS  shift, and go to state 65
    COMMA                shift, and go to state 66


state 32

    8 function_arguments: type_identifier .

    $default  reduce using rule 8 (function_arguments)


state 33

   33 declaration: const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL . CLOSING_SQUARE_BRACKETS
   38 initialization: const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL . CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    CLOSING_SQUARE_BRACKETS  shift, and go to state 67


state 34

   95 numeric_literal: INTEGER_LITERAL .

    $default  reduce using rule 95 (numeric_literal)


state 35

   96 numeric_literal: FLOAT_LITERAL .

    $default  reduce using rule 96 (numeric_literal)


state 36

   92 literal: CHARACTER_LITERAL .

    $default  reduce using rule 92 (literal)


state 37

   93 literal: STRING_LITERAL .

    $default  reduce using rule 93 (literal)


state 38

   73 logical_not_expression: BOOLEAN_LITERAL .
   94 literal: BOOLEAN_LITERAL .

    CLOSING_PARENTHESIS      reduce using rule 73 (logical_not_expression)
    CLOSING_PARENTHESIS      [reduce using rule 94 (literal)]
    CLOSING_SQUARE_BRACKETS  reduce using rule 73 (logical_not_expression)
    CLOSING_SQUARE_BRACKETS  [reduce using rule 94 (literal)]
    COMMA                    reduce using rule 73 (logical_not_expression)
    COMMA                    [reduce using rule 94 (literal)]
    SEMICOLON                reduce using rule 73 (logical_not_expression)
    SEMICOLON                [reduce using rule 94 (literal)]
    $default                 reduce using rule 73 (logical_not_expression)


state 39

   39 function_call: IDENTIFIER . OPENING_PARENTHESIS expr_list CLOSING_PARENTHESIS
   49 array_element: IDENTIFIER . OPENING_SQUARE_BRACKETS expr CLOSING_SQUARE_BRACKETS
   65 primary_expr: IDENTIFIER .

    OPENING_PARENTHESIS      shift, and go to state 68
    OPENING_SQUARE_BRACKETS  shift, and go to state 69

    $default  reduce using rule 65 (primary_expr)


state 40

   72 logical_not_expression: NOT_KEYWORD . logical_not_expression

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    BOOLEAN_LITERAL      shift, and go to state 70
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call           go to state 71
    array_element           go to state 72
    arithmetic_expr         go to state 73
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    logical_not_expression  go to state 74
    comparison_expr         go to state 56
    numeric_literal         go to state 75


state 41

   66 primary_expr: OPENING_PARENTHESIS . arithmetic_expr CLOSING_PARENTHESIS

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 76
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 42

   58 arithmetic_factor: MINUS . arithmetic_factor

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_factor  go to state 77
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 43

   88 bitwise_not_expr: BITWISE_NOT . bitwise_not_expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 78
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    bitwise_not_expr   go to state 79
    numeric_literal    go to state 75


state 44

   46 expr: function_call .
   64 primary_expr: function_call .

    CLOSING_PARENTHESIS      reduce using rule 46 (expr)
    CLOSING_PARENTHESIS      [reduce using rule 64 (primary_expr)]
    CLOSING_SQUARE_BRACKETS  reduce using rule 46 (expr)
    CLOSING_SQUARE_BRACKETS  [reduce using rule 64 (primary_expr)]
    COMMA                    reduce using rule 46 (expr)
    COMMA                    [reduce using rule 64 (primary_expr)]
    SEMICOLON                reduce using rule 46 (expr)
    SEMICOLON                [reduce using rule 64 (primary_expr)]
    $default                 reduce using rule 64 (primary_expr)


state 45

   37 initialization: const type_identifier ASSIGNMENT expr .

    $default  reduce using rule 37 (initialization)


state 46

   44 expr: array_element .
   63 primary_expr: array_element .

    CLOSING_PARENTHESIS      reduce using rule 44 (expr)
    CLOSING_PARENTHESIS      [reduce using rule 63 (primary_expr)]
    CLOSING_SQUARE_BRACKETS  reduce using rule 44 (expr)
    CLOSING_SQUARE_BRACKETS  [reduce using rule 63 (primary_expr)]
    COMMA                    reduce using rule 44 (expr)
    COMMA                    [reduce using rule 63 (primary_expr)]
    SEMICOLON                reduce using rule 44 (expr)
    SEMICOLON                [reduce using rule 63 (primary_expr)]
    $default                 reduce using rule 63 (primary_expr)


state 47

   43 expr: arithmetic_expr .
   50 arithmetic_expr: arithmetic_expr . PLUS arithmetic_term
   51                | arithmetic_expr . MINUS arithmetic_term
   75 comparison_expr: arithmetic_expr . EQUAL arithmetic_expr
   76                | arithmetic_expr . NOT_EQUAL arithmetic_expr
   77                | arithmetic_expr . LESS arithmetic_expr
   78                | arithmetic_expr . GREATER arithmetic_expr
   79                | arithmetic_expr . LESS_OR_EQUAL arithmetic_expr
   80                | arithmetic_expr . GREATER_OR_EQUAL arithmetic_expr
   81                | arithmetic_expr .
   89 bitwise_not_expr: arithmetic_expr .

    PLUS              shift, and go to state 80
    MINUS             shift, and go to state 81
    EQUAL             shift, and go to state 82
    NOT_EQUAL         shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    GREATER_OR_EQUAL  shift, and go to state 85
    LESS              shift, and go to state 86
    GREATER           shift, and go to state 87

    AND_KEYWORD              reduce using rule 81 (comparison_expr)
    OR_KEYWORD               reduce using rule 81 (comparison_expr)
    CLOSING_PARENTHESIS      reduce using rule 43 (expr)
    CLOSING_PARENTHESIS      [reduce using rule 81 (comparison_expr)]
    CLOSING_PARENTHESIS      [reduce using rule 89 (bitwise_not_expr)]
    CLOSING_SQUARE_BRACKETS  reduce using rule 43 (expr)
    CLOSING_SQUARE_BRACKETS  [reduce using rule 81 (comparison_expr)]
    CLOSING_SQUARE_BRACKETS  [reduce using rule 89 (bitwise_not_expr)]
    COMMA                    reduce using rule 43 (expr)
    COMMA                    [reduce using rule 81 (comparison_expr)]
    COMMA                    [reduce using rule 89 (bitwise_not_expr)]
    BITWISE_AND              reduce using rule 89 (bitwise_not_expr)
    BITWISE_OR               reduce using rule 89 (bitwise_not_expr)
    BITWISE_XOR              reduce using rule 89 (bitwise_not_expr)
    SEMICOLON                reduce using rule 43 (expr)
    SEMICOLON                [reduce using rule 81 (comparison_expr)]
    SEMICOLON                [reduce using rule 89 (bitwise_not_expr)]
    $default                 reduce using rule 43 (expr)


state 48

   52 arithmetic_expr: arithmetic_term .
   53 arithmetic_term: arithmetic_term . ASTRISK arithmetic_factor
   54                | arithmetic_term . DIVIDE arithmetic_factor
   55                | arithmetic_term . MODULO arithmetic_factor

    ASTRISK  shift, and go to state 88
    DIVIDE   shift, and go to state 89
    MODULO   shift, and go to state 90

    $default  reduce using rule 52 (arithmetic_expr)


state 49

   56 arithmetic_term: arithmetic_factor .

    $default  reduce using rule 56 (arithmetic_term)


state 50

   57 arithmetic_factor: postfix_expr .

    $default  reduce using rule 57 (arithmetic_factor)


state 51

   59 postfix_expr: primary_expr .
   60             | primary_expr . INCREMENT
   61             | primary_expr . DECREMENT

    INCREMENT  shift, and go to state 91
    DECREMENT  shift, and go to state 92

    $default  reduce using rule 59 (postfix_expr)


state 52

   45 expr: bool_expr .

    $default  reduce using rule 45 (expr)


state 53

   67 bool_expr: logical_or_expression .
   68 logical_or_expression: logical_or_expression . OR_KEYWORD logical_and_expression

    OR_KEYWORD  shift, and go to state 93

    $default  reduce using rule 67 (bool_expr)


state 54

   69 logical_or_expression: logical_and_expression .
   70 logical_and_expression: logical_and_expression . AND_KEYWORD logical_not_expression

    AND_KEYWORD  shift, and go to state 94

    $default  reduce using rule 69 (logical_or_expression)


state 55

   71 logical_and_expression: logical_not_expression .

    $default  reduce using rule 71 (logical_and_expression)


state 56

   74 logical_not_expression: comparison_expr .

    $default  reduce using rule 74 (logical_not_expression)


state 57

   47 expr: bitwise_expr .
   82 bitwise_expr: bitwise_expr . BITWISE_OR bitwise_xor_expr

    BITWISE_OR  shift, and go to state 95

    $default  reduce using rule 47 (expr)


state 58

   83 bitwise_expr: bitwise_xor_expr .
   84 bitwise_xor_expr: bitwise_xor_expr . BITWISE_XOR bitwise_and_expr

    BITWISE_XOR  shift, and go to state 96

    $default  reduce using rule 83 (bitwise_expr)


state 59

   85 bitwise_xor_expr: bitwise_and_expr .
   86 bitwise_and_expr: bitwise_and_expr . BITWISE_AND bitwise_not_expr

    BITWISE_AND  shift, and go to state 97

    $default  reduce using rule 85 (bitwise_xor_expr)


state 60

   87 bitwise_and_expr: bitwise_not_expr .

    $default  reduce using rule 87 (bitwise_and_expr)


state 61

   48 expr: literal .

    $default  reduce using rule 48 (expr)


state 62

   62 primary_expr: numeric_literal .
   91 literal: numeric_literal .

    CLOSING_PARENTHESIS      reduce using rule 62 (primary_expr)
    CLOSING_PARENTHESIS      [reduce using rule 91 (literal)]
    CLOSING_SQUARE_BRACKETS  reduce using rule 62 (primary_expr)
    CLOSING_SQUARE_BRACKETS  [reduce using rule 91 (literal)]
    COMMA                    reduce using rule 62 (primary_expr)
    COMMA                    [reduce using rule 91 (literal)]
    SEMICOLON                reduce using rule 62 (primary_expr)
    SEMICOLON                [reduce using rule 91 (literal)]
    $default                 reduce using rule 62 (primary_expr)


state 63

    7 function_declaration: type IDENTIFIER OPENING_PARENTHESIS function_arguments . CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE
    9 function_arguments: function_arguments . COMMA type_identifier

    CLOSING_PARENTHESIS  shift, and go to state 98
    COMMA                shift, and go to state 66


state 64

    1 program: declarations INT_TYPE_KEYWORD MAIN_KEYWORD OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_CURLY_BRACE . body return CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 13 (body)]
    INT_TYPE_KEYWORD     reduce using rule 13 (body)
    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   reduce using rule 13 (body)
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  reduce using rule 13 (body)
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    reduce using rule 13 (body)
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    reduce using rule 13 (body)
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]
    IF_KEYWORD           [reduce using rule 13 (body)]
    FOR_KEYWORD          [reduce using rule 13 (body)]
    WHILE_KEYWORD        [reduce using rule 13 (body)]
    SWITCH_KEYWORD       [reduce using rule 13 (body)]
    DO_KEYWORD           [reduce using rule 13 (body)]
    CONST_KEYWORD        [reduce using rule 13 (body)]
    OPENING_CURLY_BRACE  [reduce using rule 13 (body)]
    UNRECOGNIZED_TOKEN   [reduce using rule 13 (body)]
    RESERVED_IDENTIFIER  [reduce using rule 13 (body)]
    $default             reduce using rule 13 (body)

    body                       go to state 108
    statement                  go to state 109
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 65

    6 function_declaration: VOID_TYPE_KEYWORD IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS . OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    OPENING_CURLY_BRACE  shift, and go to state 127


state 66

    9 function_arguments: function_arguments COMMA . type_identifier

    INT_TYPE_KEYWORD     shift, and go to state 18
    FLOAT_TYPE_KEYWORD   shift, and go to state 5
    STRING_TYPE_KEYWORD  shift, and go to state 6
    CHAR_TYPE_KEYWORD    shift, and go to state 7
    BOOL_TYPE_KEYWORD    shift, and go to state 8

    type_identifier  go to state 128
    type             go to state 20


state 67

   33 declaration: const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS .
   38 initialization: const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS . ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    ASSIGNMENT  shift, and go to state 129

    $default  reduce using rule 33 (declaration)


state 68

   39 function_call: IDENTIFIER OPENING_PARENTHESIS . expr_list CLOSING_PARENTHESIS

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    CHARACTER_LITERAL    shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    BOOLEAN_LITERAL      shift, and go to state 38
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    $default  reduce using rule 42 (expr_list)

    function_call           go to state 44
    expr_list               go to state 130
    expr                    go to state 131
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 69

   49 array_element: IDENTIFIER OPENING_SQUARE_BRACKETS . expr CLOSING_SQUARE_BRACKETS

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    CHARACTER_LITERAL    shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    BOOLEAN_LITERAL      shift, and go to state 38
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call           go to state 44
    expr                    go to state 132
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 70

   73 logical_not_expression: BOOLEAN_LITERAL .

    $default  reduce using rule 73 (logical_not_expression)


state 71

   64 primary_expr: function_call .

    $default  reduce using rule 64 (primary_expr)


state 72

   63 primary_expr: array_element .

    $default  reduce using rule 63 (primary_expr)


state 73

   50 arithmetic_expr: arithmetic_expr . PLUS arithmetic_term
   51                | arithmetic_expr . MINUS arithmetic_term
   75 comparison_expr: arithmetic_expr . EQUAL arithmetic_expr
   76                | arithmetic_expr . NOT_EQUAL arithmetic_expr
   77                | arithmetic_expr . LESS arithmetic_expr
   78                | arithmetic_expr . GREATER arithmetic_expr
   79                | arithmetic_expr . LESS_OR_EQUAL arithmetic_expr
   80                | arithmetic_expr . GREATER_OR_EQUAL arithmetic_expr
   81                | arithmetic_expr .

    PLUS              shift, and go to state 80
    MINUS             shift, and go to state 81
    EQUAL             shift, and go to state 82
    NOT_EQUAL         shift, and go to state 83
    LESS_OR_EQUAL     shift, and go to state 84
    GREATER_OR_EQUAL  shift, and go to state 85
    LESS              shift, and go to state 86
    GREATER           shift, and go to state 87

    $default  reduce using rule 81 (comparison_expr)


state 74

   72 logical_not_expression: NOT_KEYWORD logical_not_expression .

    $default  reduce using rule 72 (logical_not_expression)


state 75

   62 primary_expr: numeric_literal .

    $default  reduce using rule 62 (primary_expr)


state 76

   50 arithmetic_expr: arithmetic_expr . PLUS arithmetic_term
   51                | arithmetic_expr . MINUS arithmetic_term
   66 primary_expr: OPENING_PARENTHESIS arithmetic_expr . CLOSING_PARENTHESIS

    CLOSING_PARENTHESIS  shift, and go to state 133
    PLUS                 shift, and go to state 80
    MINUS                shift, and go to state 81


state 77

   58 arithmetic_factor: MINUS arithmetic_factor .

    $default  reduce using rule 58 (arithmetic_factor)


state 78

   50 arithmetic_expr: arithmetic_expr . PLUS arithmetic_term
   51                | arithmetic_expr . MINUS arithmetic_term
   89 bitwise_not_expr: arithmetic_expr .

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81

    $default  reduce using rule 89 (bitwise_not_expr)


state 79

   88 bitwise_not_expr: BITWISE_NOT bitwise_not_expr .

    $default  reduce using rule 88 (bitwise_not_expr)


state 80

   50 arithmetic_expr: arithmetic_expr PLUS . arithmetic_term

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_term    go to state 134
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 81

   51 arithmetic_expr: arithmetic_expr MINUS . arithmetic_term

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_term    go to state 135
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 82

   75 comparison_expr: arithmetic_expr EQUAL . arithmetic_expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 136
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 83

   76 comparison_expr: arithmetic_expr NOT_EQUAL . arithmetic_expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 137
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 84

   79 comparison_expr: arithmetic_expr LESS_OR_EQUAL . arithmetic_expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 138
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 85

   80 comparison_expr: arithmetic_expr GREATER_OR_EQUAL . arithmetic_expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 139
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 86

   77 comparison_expr: arithmetic_expr LESS . arithmetic_expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 140
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 87

   78 comparison_expr: arithmetic_expr GREATER . arithmetic_expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 141
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 88

   53 arithmetic_term: arithmetic_term ASTRISK . arithmetic_factor

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_factor  go to state 142
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 89

   54 arithmetic_term: arithmetic_term DIVIDE . arithmetic_factor

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_factor  go to state 143
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 90

   55 arithmetic_term: arithmetic_term MODULO . arithmetic_factor

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_factor  go to state 144
    postfix_expr       go to state 50
    primary_expr       go to state 51
    numeric_literal    go to state 75


state 91

   60 postfix_expr: primary_expr INCREMENT .

    $default  reduce using rule 60 (postfix_expr)


state 92

   61 postfix_expr: primary_expr DECREMENT .

    $default  reduce using rule 61 (postfix_expr)


state 93

   68 logical_or_expression: logical_or_expression OR_KEYWORD . logical_and_expression

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    BOOLEAN_LITERAL      shift, and go to state 70
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call           go to state 71
    array_element           go to state 72
    arithmetic_expr         go to state 73
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    logical_and_expression  go to state 145
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    numeric_literal         go to state 75


state 94

   70 logical_and_expression: logical_and_expression AND_KEYWORD . logical_not_expression

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    BOOLEAN_LITERAL      shift, and go to state 70
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call           go to state 71
    array_element           go to state 72
    arithmetic_expr         go to state 73
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    logical_not_expression  go to state 146
    comparison_expr         go to state 56
    numeric_literal         go to state 75


state 95

   82 bitwise_expr: bitwise_expr BITWISE_OR . bitwise_xor_expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 78
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    bitwise_xor_expr   go to state 147
    bitwise_and_expr   go to state 59
    bitwise_not_expr   go to state 60
    numeric_literal    go to state 75


state 96

   84 bitwise_xor_expr: bitwise_xor_expr BITWISE_XOR . bitwise_and_expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 78
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    bitwise_and_expr   go to state 148
    bitwise_not_expr   go to state 60
    numeric_literal    go to state 75


state 97

   86 bitwise_and_expr: bitwise_and_expr BITWISE_AND . bitwise_not_expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    IDENTIFIER           shift, and go to state 39
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call      go to state 71
    array_element      go to state 72
    arithmetic_expr    go to state 78
    arithmetic_term    go to state 48
    arithmetic_factor  go to state 49
    postfix_expr       go to state 50
    primary_expr       go to state 51
    bitwise_not_expr   go to state 149
    numeric_literal    go to state 75


state 98

    7 function_declaration: type IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS . OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE

    OPENING_CURLY_BRACE  shift, and go to state 150


state 99

   34 assignment: IDENTIFIER . ASSIGNMENT expr
   35           | IDENTIFIER . ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS
   36           | IDENTIFIER . OPENING_SQUARE_BRACKETS expr CLOSING_SQUARE_BRACKETS ASSIGNMENT expr
   39 function_call: IDENTIFIER . OPENING_PARENTHESIS expr_list CLOSING_PARENTHESIS

    OPENING_PARENTHESIS      shift, and go to state 68
    OPENING_SQUARE_BRACKETS  shift, and go to state 151
    ASSIGNMENT               shift, and go to state 152


state 100

  105 matched_statement: IF_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD matched_statement
  109 unmatched_statement: IF_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS body
  110                    | IF_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD unmatched_statement

    OPENING_PARENTHESIS  shift, and go to state 153


state 101

  136 for: FOR_KEYWORD . OPENING_PARENTHESIS loop_start SEMICOLON bool_expr SEMICOLON assignment CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    OPENING_PARENTHESIS  shift, and go to state 154


state 102

  139 while: WHILE_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    OPENING_PARENTHESIS  shift, and go to state 155


state 103

  141 switch: SWITCH_KEYWORD . OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list CLOSING_CURLY_BRACE
  142       | SWITCH_KEYWORD . OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list DEFAULT_KEYWORD COLON body CLOSING_CURLY_BRACE

    OPENING_PARENTHESIS  shift, and go to state 156


state 104

  140 do_while: DO_KEYWORD . OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS SEMICOLON

    OPENING_CURLY_BRACE  shift, and go to state 157


state 105

   29 block_structure: OPENING_CURLY_BRACE . body CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 13 (body)]
    INT_TYPE_KEYWORD     reduce using rule 13 (body)
    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   reduce using rule 13 (body)
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  reduce using rule 13 (body)
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    reduce using rule 13 (body)
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    reduce using rule 13 (body)
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]
    IF_KEYWORD           [reduce using rule 13 (body)]
    FOR_KEYWORD          [reduce using rule 13 (body)]
    WHILE_KEYWORD        [reduce using rule 13 (body)]
    SWITCH_KEYWORD       [reduce using rule 13 (body)]
    DO_KEYWORD           [reduce using rule 13 (body)]
    CONST_KEYWORD        [reduce using rule 13 (body)]
    OPENING_CURLY_BRACE  [reduce using rule 13 (body)]
    UNRECOGNIZED_TOKEN   [reduce using rule 13 (body)]
    RESERVED_IDENTIFIER  [reduce using rule 13 (body)]
    $default             reduce using rule 13 (body)

    body                       go to state 158
    statement                  go to state 109
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 106

   27 error_token: UNRECOGNIZED_TOKEN .

    $default  reduce using rule 27 (error_token)


state 107

   28 error_token: RESERVED_IDENTIFIER .

    $default  reduce using rule 28 (error_token)


state 108

    1 program: declarations INT_TYPE_KEYWORD MAIN_KEYWORD OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_CURLY_BRACE body . return CLOSING_CURLY_BRACE
   11 body: body . statement

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    RETURN_KEYWORD       shift, and go to state 159
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    statement                  go to state 160
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    return                     go to state 161
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 109

   12 body: statement .

    $default  reduce using rule 12 (body)


state 110

  107 non_if_statements: non_if_statement .

    $default  reduce using rule 107 (non_if_statements)


state 111

   26 non_if_statement: error_token . SEMICOLON
  126 non_loop_non_if_statement: error_token . SEMICOLON

    SEMICOLON  shift, and go to state 162


state 112

   25 non_if_statement: block_structure . SEMICOLON
  125 non_loop_non_if_statement: block_structure . SEMICOLON

    SEMICOLON  shift, and go to state 163


state 113

   19 non_if_statement: declaration . SEMICOLON
  123 non_loop_non_if_statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 164


state 114

   17 non_if_statement: assignment . SEMICOLON
  121 non_loop_non_if_statement: assignment . SEMICOLON

    SEMICOLON  shift, and go to state 165


state 115

   18 non_if_statement: initialization . SEMICOLON
  122 non_loop_non_if_statement: initialization . SEMICOLON

    SEMICOLON  shift, and go to state 166


state 116

   20 non_if_statement: function_call . SEMICOLON
  124 non_loop_non_if_statement: function_call . SEMICOLON

    SEMICOLON  shift, and go to state 167


state 117

   14 statement: if .

    $default  reduce using rule 14 (statement)


state 118

  103 if: matched_statement .

    $default  reduce using rule 103 (if)


state 119

  106 matched_statement: non_if_statements .
  108 non_if_statements: non_if_statements . non_if_statement

    IDENTIFIER           shift, and go to state 99
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 106 (matched_statement)]
    INT_TYPE_KEYWORD     reduce using rule 31 (const)
    INT_TYPE_KEYWORD     [reduce using rule 106 (matched_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 31 (const)
    FLOAT_TYPE_KEYWORD   [reduce using rule 106 (matched_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 31 (const)
    STRING_TYPE_KEYWORD  [reduce using rule 106 (matched_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 31 (const)
    CHAR_TYPE_KEYWORD    [reduce using rule 106 (matched_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 31 (const)
    BOOL_TYPE_KEYWORD    [reduce using rule 106 (matched_statement)]
    FOR_KEYWORD          [reduce using rule 106 (matched_statement)]
    WHILE_KEYWORD        [reduce using rule 106 (matched_statement)]
    SWITCH_KEYWORD       [reduce using rule 106 (matched_statement)]
    DO_KEYWORD           [reduce using rule 106 (matched_statement)]
    CONST_KEYWORD        [reduce using rule 106 (matched_statement)]
    OPENING_CURLY_BRACE  [reduce using rule 106 (matched_statement)]
    UNRECOGNIZED_TOKEN   [reduce using rule 106 (matched_statement)]
    RESERVED_IDENTIFIER  [reduce using rule 106 (matched_statement)]
    $default             reduce using rule 106 (matched_statement)

    non_if_statement  go to state 168
    error_token       go to state 169
    block_structure   go to state 170
    const             go to state 12
    declaration       go to state 171
    assignment        go to state 172
    initialization    go to state 173
    function_call     go to state 174
    for               go to state 175
    while             go to state 176
    do_while          go to state 177
    switch            go to state 178


state 120

  104 if: unmatched_statement .

    $default  reduce using rule 104 (if)


state 121

   15 statement: non_loop_non_if_statement .

    $default  reduce using rule 15 (statement)


state 122

   16 statement: loop_statement .

    $default  reduce using rule 16 (statement)


state 123

   21 non_if_statement: for .
  128 loop_statement: for .

    IDENTIFIER           reduce using rule 21 (non_if_statement)
    IDENTIFIER           [reduce using rule 128 (loop_statement)]
    INT_TYPE_KEYWORD     reduce using rule 21 (non_if_statement)
    INT_TYPE_KEYWORD     [reduce using rule 128 (loop_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 21 (non_if_statement)
    FLOAT_TYPE_KEYWORD   [reduce using rule 128 (loop_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 21 (non_if_statement)
    STRING_TYPE_KEYWORD  [reduce using rule 128 (loop_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 21 (non_if_statement)
    CHAR_TYPE_KEYWORD    [reduce using rule 128 (loop_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 21 (non_if_statement)
    BOOL_TYPE_KEYWORD    [reduce using rule 128 (loop_statement)]
    IF_KEYWORD           reduce using rule 21 (non_if_statement)
    IF_KEYWORD           [reduce using rule 128 (loop_statement)]
    FOR_KEYWORD          reduce using rule 21 (non_if_statement)
    FOR_KEYWORD          [reduce using rule 128 (loop_statement)]
    WHILE_KEYWORD        reduce using rule 21 (non_if_statement)
    WHILE_KEYWORD        [reduce using rule 128 (loop_statement)]
    SWITCH_KEYWORD       reduce using rule 21 (non_if_statement)
    SWITCH_KEYWORD       [reduce using rule 128 (loop_statement)]
    DO_KEYWORD           reduce using rule 21 (non_if_statement)
    DO_KEYWORD           [reduce using rule 128 (loop_statement)]
    RETURN_KEYWORD       reduce using rule 21 (non_if_statement)
    RETURN_KEYWORD       [reduce using rule 128 (loop_statement)]
    CASE_KEYWORD         reduce using rule 21 (non_if_statement)
    CASE_KEYWORD         [reduce using rule 128 (loop_statement)]
    CONST_KEYWORD        reduce using rule 21 (non_if_statement)
    CONST_KEYWORD        [reduce using rule 128 (loop_statement)]
    BREAK_KEYWORD        reduce using rule 21 (non_if_statement)
    BREAK_KEYWORD        [reduce using rule 128 (loop_statement)]
    CONTINUE_KEYWORD     reduce using rule 21 (non_if_statement)
    CONTINUE_KEYWORD     [reduce using rule 128 (loop_statement)]
    DEFAULT_KEYWORD      reduce using rule 21 (non_if_statement)
    DEFAULT_KEYWORD      [reduce using rule 128 (loop_statement)]
    OPENING_CURLY_BRACE  reduce using rule 21 (non_if_statement)
    OPENING_CURLY_BRACE  [reduce using rule 128 (loop_statement)]
    CLOSING_CURLY_BRACE  reduce using rule 21 (non_if_statement)
    CLOSING_CURLY_BRACE  [reduce using rule 128 (loop_statement)]
    UNRECOGNIZED_TOKEN   reduce using rule 21 (non_if_statement)
    UNRECOGNIZED_TOKEN   [reduce using rule 128 (loop_statement)]
    RESERVED_IDENTIFIER  reduce using rule 21 (non_if_statement)
    RESERVED_IDENTIFIER  [reduce using rule 128 (loop_statement)]
    $default             reduce using rule 21 (non_if_statement)


state 124

   22 non_if_statement: while .
  129 loop_statement: while .

    IDENTIFIER           reduce using rule 22 (non_if_statement)
    IDENTIFIER           [reduce using rule 129 (loop_statement)]
    INT_TYPE_KEYWORD     reduce using rule 22 (non_if_statement)
    INT_TYPE_KEYWORD     [reduce using rule 129 (loop_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 22 (non_if_statement)
    FLOAT_TYPE_KEYWORD   [reduce using rule 129 (loop_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 22 (non_if_statement)
    STRING_TYPE_KEYWORD  [reduce using rule 129 (loop_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 22 (non_if_statement)
    CHAR_TYPE_KEYWORD    [reduce using rule 129 (loop_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 22 (non_if_statement)
    BOOL_TYPE_KEYWORD    [reduce using rule 129 (loop_statement)]
    IF_KEYWORD           reduce using rule 22 (non_if_statement)
    IF_KEYWORD           [reduce using rule 129 (loop_statement)]
    FOR_KEYWORD          reduce using rule 22 (non_if_statement)
    FOR_KEYWORD          [reduce using rule 129 (loop_statement)]
    WHILE_KEYWORD        reduce using rule 22 (non_if_statement)
    WHILE_KEYWORD        [reduce using rule 129 (loop_statement)]
    SWITCH_KEYWORD       reduce using rule 22 (non_if_statement)
    SWITCH_KEYWORD       [reduce using rule 129 (loop_statement)]
    DO_KEYWORD           reduce using rule 22 (non_if_statement)
    DO_KEYWORD           [reduce using rule 129 (loop_statement)]
    RETURN_KEYWORD       reduce using rule 22 (non_if_statement)
    RETURN_KEYWORD       [reduce using rule 129 (loop_statement)]
    CASE_KEYWORD         reduce using rule 22 (non_if_statement)
    CASE_KEYWORD         [reduce using rule 129 (loop_statement)]
    CONST_KEYWORD        reduce using rule 22 (non_if_statement)
    CONST_KEYWORD        [reduce using rule 129 (loop_statement)]
    BREAK_KEYWORD        reduce using rule 22 (non_if_statement)
    BREAK_KEYWORD        [reduce using rule 129 (loop_statement)]
    CONTINUE_KEYWORD     reduce using rule 22 (non_if_statement)
    CONTINUE_KEYWORD     [reduce using rule 129 (loop_statement)]
    DEFAULT_KEYWORD      reduce using rule 22 (non_if_statement)
    DEFAULT_KEYWORD      [reduce using rule 129 (loop_statement)]
    OPENING_CURLY_BRACE  reduce using rule 22 (non_if_statement)
    OPENING_CURLY_BRACE  [reduce using rule 129 (loop_statement)]
    CLOSING_CURLY_BRACE  reduce using rule 22 (non_if_statement)
    CLOSING_CURLY_BRACE  [reduce using rule 129 (loop_statement)]
    UNRECOGNIZED_TOKEN   reduce using rule 22 (non_if_statement)
    UNRECOGNIZED_TOKEN   [reduce using rule 129 (loop_statement)]
    RESERVED_IDENTIFIER  reduce using rule 22 (non_if_statement)
    RESERVED_IDENTIFIER  [reduce using rule 129 (loop_statement)]
    $default             reduce using rule 22 (non_if_statement)


state 125

   23 non_if_statement: do_while .
  130 loop_statement: do_while .

    IDENTIFIER           reduce using rule 23 (non_if_statement)
    IDENTIFIER           [reduce using rule 130 (loop_statement)]
    INT_TYPE_KEYWORD     reduce using rule 23 (non_if_statement)
    INT_TYPE_KEYWORD     [reduce using rule 130 (loop_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 23 (non_if_statement)
    FLOAT_TYPE_KEYWORD   [reduce using rule 130 (loop_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 23 (non_if_statement)
    STRING_TYPE_KEYWORD  [reduce using rule 130 (loop_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 23 (non_if_statement)
    CHAR_TYPE_KEYWORD    [reduce using rule 130 (loop_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 23 (non_if_statement)
    BOOL_TYPE_KEYWORD    [reduce using rule 130 (loop_statement)]
    IF_KEYWORD           reduce using rule 23 (non_if_statement)
    IF_KEYWORD           [reduce using rule 130 (loop_statement)]
    FOR_KEYWORD          reduce using rule 23 (non_if_statement)
    FOR_KEYWORD          [reduce using rule 130 (loop_statement)]
    WHILE_KEYWORD        reduce using rule 23 (non_if_statement)
    WHILE_KEYWORD        [reduce using rule 130 (loop_statement)]
    SWITCH_KEYWORD       reduce using rule 23 (non_if_statement)
    SWITCH_KEYWORD       [reduce using rule 130 (loop_statement)]
    DO_KEYWORD           reduce using rule 23 (non_if_statement)
    DO_KEYWORD           [reduce using rule 130 (loop_statement)]
    RETURN_KEYWORD       reduce using rule 23 (non_if_statement)
    RETURN_KEYWORD       [reduce using rule 130 (loop_statement)]
    CASE_KEYWORD         reduce using rule 23 (non_if_statement)
    CASE_KEYWORD         [reduce using rule 130 (loop_statement)]
    CONST_KEYWORD        reduce using rule 23 (non_if_statement)
    CONST_KEYWORD        [reduce using rule 130 (loop_statement)]
    BREAK_KEYWORD        reduce using rule 23 (non_if_statement)
    BREAK_KEYWORD        [reduce using rule 130 (loop_statement)]
    CONTINUE_KEYWORD     reduce using rule 23 (non_if_statement)
    CONTINUE_KEYWORD     [reduce using rule 130 (loop_statement)]
    DEFAULT_KEYWORD      reduce using rule 23 (non_if_statement)
    DEFAULT_KEYWORD      [reduce using rule 130 (loop_statement)]
    OPENING_CURLY_BRACE  reduce using rule 23 (non_if_statement)
    OPENING_CURLY_BRACE  [reduce using rule 130 (loop_statement)]
    CLOSING_CURLY_BRACE  reduce using rule 23 (non_if_statement)
    CLOSING_CURLY_BRACE  [reduce using rule 130 (loop_statement)]
    UNRECOGNIZED_TOKEN   reduce using rule 23 (non_if_statement)
    UNRECOGNIZED_TOKEN   [reduce using rule 130 (loop_statement)]
    RESERVED_IDENTIFIER  reduce using rule 23 (non_if_statement)
    RESERVED_IDENTIFIER  [reduce using rule 130 (loop_statement)]
    $default             reduce using rule 23 (non_if_statement)


state 126

   24 non_if_statement: switch .
  127 non_loop_non_if_statement: switch .

    IDENTIFIER           reduce using rule 24 (non_if_statement)
    IDENTIFIER           [reduce using rule 127 (non_loop_non_if_statement)]
    INT_TYPE_KEYWORD     reduce using rule 24 (non_if_statement)
    INT_TYPE_KEYWORD     [reduce using rule 127 (non_loop_non_if_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 24 (non_if_statement)
    FLOAT_TYPE_KEYWORD   [reduce using rule 127 (non_loop_non_if_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 24 (non_if_statement)
    STRING_TYPE_KEYWORD  [reduce using rule 127 (non_loop_non_if_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 24 (non_if_statement)
    CHAR_TYPE_KEYWORD    [reduce using rule 127 (non_loop_non_if_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 24 (non_if_statement)
    BOOL_TYPE_KEYWORD    [reduce using rule 127 (non_loop_non_if_statement)]
    IF_KEYWORD           reduce using rule 24 (non_if_statement)
    IF_KEYWORD           [reduce using rule 127 (non_loop_non_if_statement)]
    FOR_KEYWORD          reduce using rule 24 (non_if_statement)
    FOR_KEYWORD          [reduce using rule 127 (non_loop_non_if_statement)]
    WHILE_KEYWORD        reduce using rule 24 (non_if_statement)
    WHILE_KEYWORD        [reduce using rule 127 (non_loop_non_if_statement)]
    SWITCH_KEYWORD       reduce using rule 24 (non_if_statement)
    SWITCH_KEYWORD       [reduce using rule 127 (non_loop_non_if_statement)]
    DO_KEYWORD           reduce using rule 24 (non_if_statement)
    DO_KEYWORD           [reduce using rule 127 (non_loop_non_if_statement)]
    RETURN_KEYWORD       reduce using rule 24 (non_if_statement)
    RETURN_KEYWORD       [reduce using rule 127 (non_loop_non_if_statement)]
    CASE_KEYWORD         reduce using rule 24 (non_if_statement)
    CASE_KEYWORD         [reduce using rule 127 (non_loop_non_if_statement)]
    CONST_KEYWORD        reduce using rule 24 (non_if_statement)
    CONST_KEYWORD        [reduce using rule 127 (non_loop_non_if_statement)]
    BREAK_KEYWORD        reduce using rule 24 (non_if_statement)
    BREAK_KEYWORD        [reduce using rule 127 (non_loop_non_if_statement)]
    CONTINUE_KEYWORD     reduce using rule 24 (non_if_statement)
    CONTINUE_KEYWORD     [reduce using rule 127 (non_loop_non_if_statement)]
    DEFAULT_KEYWORD      reduce using rule 24 (non_if_statement)
    DEFAULT_KEYWORD      [reduce using rule 127 (non_loop_non_if_statement)]
    OPENING_CURLY_BRACE  reduce using rule 24 (non_if_statement)
    OPENING_CURLY_BRACE  [reduce using rule 127 (non_loop_non_if_statement)]
    CLOSING_CURLY_BRACE  reduce using rule 24 (non_if_statement)
    CLOSING_CURLY_BRACE  [reduce using rule 127 (non_loop_non_if_statement)]
    UNRECOGNIZED_TOKEN   reduce using rule 24 (non_if_statement)
    UNRECOGNIZED_TOKEN   [reduce using rule 127 (non_loop_non_if_statement)]
    RESERVED_IDENTIFIER  reduce using rule 24 (non_if_statement)
    RESERVED_IDENTIFIER  [reduce using rule 127 (non_loop_non_if_statement)]
    $default             reduce using rule 24 (non_if_statement)


state 127

    6 function_declaration: VOID_TYPE_KEYWORD IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE . body return CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 13 (body)]
    INT_TYPE_KEYWORD     reduce using rule 13 (body)
    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   reduce using rule 13 (body)
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  reduce using rule 13 (body)
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    reduce using rule 13 (body)
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    reduce using rule 13 (body)
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]
    IF_KEYWORD           [reduce using rule 13 (body)]
    FOR_KEYWORD          [reduce using rule 13 (body)]
    WHILE_KEYWORD        [reduce using rule 13 (body)]
    SWITCH_KEYWORD       [reduce using rule 13 (body)]
    DO_KEYWORD           [reduce using rule 13 (body)]
    CONST_KEYWORD        [reduce using rule 13 (body)]
    OPENING_CURLY_BRACE  [reduce using rule 13 (body)]
    UNRECOGNIZED_TOKEN   [reduce using rule 13 (body)]
    RESERVED_IDENTIFIER  [reduce using rule 13 (body)]
    $default             reduce using rule 13 (body)

    body                       go to state 179
    statement                  go to state 109
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 128

    9 function_arguments: function_arguments COMMA type_identifier .

    $default  reduce using rule 9 (function_arguments)


state 129

   38 initialization: const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT . OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    OPENING_SQUARE_BRACKETS  shift, and go to state 180


state 130

   39 function_call: IDENTIFIER OPENING_PARENTHESIS expr_list . CLOSING_PARENTHESIS
   41 expr_list: expr_list . COMMA expr

    CLOSING_PARENTHESIS  shift, and go to state 181
    COMMA                shift, and go to state 182


state 131

   40 expr_list: expr .

    $default  reduce using rule 40 (expr_list)


state 132

   49 array_element: IDENTIFIER OPENING_SQUARE_BRACKETS expr . CLOSING_SQUARE_BRACKETS

    CLOSING_SQUARE_BRACKETS  shift, and go to state 183


state 133

   66 primary_expr: OPENING_PARENTHESIS arithmetic_expr CLOSING_PARENTHESIS .

    $default  reduce using rule 66 (primary_expr)


state 134

   50 arithmetic_expr: arithmetic_expr PLUS arithmetic_term .
   53 arithmetic_term: arithmetic_term . ASTRISK arithmetic_factor
   54                | arithmetic_term . DIVIDE arithmetic_factor
   55                | arithmetic_term . MODULO arithmetic_factor

    ASTRISK  shift, and go to state 88
    DIVIDE   shift, and go to state 89
    MODULO   shift, and go to state 90

    $default  reduce using rule 50 (arithmetic_expr)


state 135

   51 arithmetic_expr: arithmetic_expr MINUS arithmetic_term .
   53 arithmetic_term: arithmetic_term . ASTRISK arithmetic_factor
   54                | arithmetic_term . DIVIDE arithmetic_factor
   55                | arithmetic_term . MODULO arithmetic_factor

    ASTRISK  shift, and go to state 88
    DIVIDE   shift, and go to state 89
    MODULO   shift, and go to state 90

    $default  reduce using rule 51 (arithmetic_expr)


state 136

   50 arithmetic_expr: arithmetic_expr . PLUS arithmetic_term
   51                | arithmetic_expr . MINUS arithmetic_term
   75 comparison_expr: arithmetic_expr EQUAL arithmetic_expr .

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81

    $default  reduce using rule 75 (comparison_expr)


state 137

   50 arithmetic_expr: arithmetic_expr . PLUS arithmetic_term
   51                | arithmetic_expr . MINUS arithmetic_term
   76 comparison_expr: arithmetic_expr NOT_EQUAL arithmetic_expr .

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81

    $default  reduce using rule 76 (comparison_expr)


state 138

   50 arithmetic_expr: arithmetic_expr . PLUS arithmetic_term
   51                | arithmetic_expr . MINUS arithmetic_term
   79 comparison_expr: arithmetic_expr LESS_OR_EQUAL arithmetic_expr .

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81

    $default  reduce using rule 79 (comparison_expr)


state 139

   50 arithmetic_expr: arithmetic_expr . PLUS arithmetic_term
   51                | arithmetic_expr . MINUS arithmetic_term
   80 comparison_expr: arithmetic_expr GREATER_OR_EQUAL arithmetic_expr .

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81

    $default  reduce using rule 80 (comparison_expr)


state 140

   50 arithmetic_expr: arithmetic_expr . PLUS arithmetic_term
   51                | arithmetic_expr . MINUS arithmetic_term
   77 comparison_expr: arithmetic_expr LESS arithmetic_expr .

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81

    $default  reduce using rule 77 (comparison_expr)


state 141

   50 arithmetic_expr: arithmetic_expr . PLUS arithmetic_term
   51                | arithmetic_expr . MINUS arithmetic_term
   78 comparison_expr: arithmetic_expr GREATER arithmetic_expr .

    PLUS   shift, and go to state 80
    MINUS  shift, and go to state 81

    $default  reduce using rule 78 (comparison_expr)


state 142

   53 arithmetic_term: arithmetic_term ASTRISK arithmetic_factor .

    $default  reduce using rule 53 (arithmetic_term)


state 143

   54 arithmetic_term: arithmetic_term DIVIDE arithmetic_factor .

    $default  reduce using rule 54 (arithmetic_term)


state 144

   55 arithmetic_term: arithmetic_term MODULO arithmetic_factor .

    $default  reduce using rule 55 (arithmetic_term)


state 145

   68 logical_or_expression: logical_or_expression OR_KEYWORD logical_and_expression .
   70 logical_and_expression: logical_and_expression . AND_KEYWORD logical_not_expression

    AND_KEYWORD  shift, and go to state 94

    $default  reduce using rule 68 (logical_or_expression)


state 146

   70 logical_and_expression: logical_and_expression AND_KEYWORD logical_not_expression .

    $default  reduce using rule 70 (logical_and_expression)


state 147

   82 bitwise_expr: bitwise_expr BITWISE_OR bitwise_xor_expr .
   84 bitwise_xor_expr: bitwise_xor_expr . BITWISE_XOR bitwise_and_expr

    BITWISE_XOR  shift, and go to state 96

    $default  reduce using rule 82 (bitwise_expr)


state 148

   84 bitwise_xor_expr: bitwise_xor_expr BITWISE_XOR bitwise_and_expr .
   86 bitwise_and_expr: bitwise_and_expr . BITWISE_AND bitwise_not_expr

    BITWISE_AND  shift, and go to state 97

    $default  reduce using rule 84 (bitwise_xor_expr)


state 149

   86 bitwise_and_expr: bitwise_and_expr BITWISE_AND bitwise_not_expr .

    $default  reduce using rule 86 (bitwise_and_expr)


state 150

    7 function_declaration: type IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE . body return CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 13 (body)]
    INT_TYPE_KEYWORD     reduce using rule 13 (body)
    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   reduce using rule 13 (body)
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  reduce using rule 13 (body)
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    reduce using rule 13 (body)
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    reduce using rule 13 (body)
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]
    IF_KEYWORD           [reduce using rule 13 (body)]
    FOR_KEYWORD          [reduce using rule 13 (body)]
    WHILE_KEYWORD        [reduce using rule 13 (body)]
    SWITCH_KEYWORD       [reduce using rule 13 (body)]
    DO_KEYWORD           [reduce using rule 13 (body)]
    CONST_KEYWORD        [reduce using rule 13 (body)]
    OPENING_CURLY_BRACE  [reduce using rule 13 (body)]
    UNRECOGNIZED_TOKEN   [reduce using rule 13 (body)]
    RESERVED_IDENTIFIER  [reduce using rule 13 (body)]
    $default             reduce using rule 13 (body)

    body                       go to state 184
    statement                  go to state 109
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 151

   36 assignment: IDENTIFIER OPENING_SQUARE_BRACKETS . expr CLOSING_SQUARE_BRACKETS ASSIGNMENT expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    CHARACTER_LITERAL    shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    BOOLEAN_LITERAL      shift, and go to state 38
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call           go to state 44
    expr                    go to state 185
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 152

   34 assignment: IDENTIFIER ASSIGNMENT . expr
   35           | IDENTIFIER ASSIGNMENT . OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    INTEGER_LITERAL          shift, and go to state 34
    FLOAT_LITERAL            shift, and go to state 35
    CHARACTER_LITERAL        shift, and go to state 36
    STRING_LITERAL           shift, and go to state 37
    BOOLEAN_LITERAL          shift, and go to state 38
    IDENTIFIER               shift, and go to state 39
    NOT_KEYWORD              shift, and go to state 40
    OPENING_PARENTHESIS      shift, and go to state 41
    OPENING_SQUARE_BRACKETS  shift, and go to state 186
    MINUS                    shift, and go to state 42
    BITWISE_NOT              shift, and go to state 43

    function_call           go to state 44
    expr                    go to state 187
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 153

  105 matched_statement: IF_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD matched_statement
  109 unmatched_statement: IF_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS body
  110                    | IF_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD unmatched_statement

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    BOOLEAN_LITERAL      shift, and go to state 70
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call           go to state 71
    array_element           go to state 72
    arithmetic_expr         go to state 73
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 188
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    numeric_literal         go to state 75


state 154

  136 for: FOR_KEYWORD OPENING_PARENTHESIS . loop_start SEMICOLON bool_expr SEMICOLON assignment CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    IDENTIFIER     shift, and go to state 189
    CONST_KEYWORD  shift, and go to state 10

    $default  reduce using rule 31 (const)

    const           go to state 190
    assignment      go to state 191
    initialization  go to state 192
    loop_start      go to state 193


state 155

  139 while: WHILE_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    BOOLEAN_LITERAL      shift, and go to state 70
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call           go to state 71
    array_element           go to state 72
    arithmetic_expr         go to state 73
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 194
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    numeric_literal         go to state 75


state 156

  141 switch: SWITCH_KEYWORD OPENING_PARENTHESIS . expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list CLOSING_CURLY_BRACE
  142       | SWITCH_KEYWORD OPENING_PARENTHESIS . expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list DEFAULT_KEYWORD COLON body CLOSING_CURLY_BRACE

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    CHARACTER_LITERAL    shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    BOOLEAN_LITERAL      shift, and go to state 38
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call           go to state 44
    expr                    go to state 195
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 157

  140 do_while: DO_KEYWORD OPENING_CURLY_BRACE . loop_body_statements CLOSING_CURLY_BRACE WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS SEMICOLON

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 196
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    non_if_statements          go to state 197
    if_in_loop                 go to state 198
    matched_if_in_loop         go to state 199
    unmatched_if_in_loop       go to state 200
    loop_body_statement        go to state 201
    non_loop_non_if_statement  go to state 202
    loop_statement             go to state 203
    loop_body_statements       go to state 204
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 158

   11 body: body . statement
   29 block_structure: OPENING_CURLY_BRACE body . CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    CLOSING_CURLY_BRACE  shift, and go to state 205
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    statement                  go to state 160
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 159

   90 return: RETURN_KEYWORD . expr SEMICOLON

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    CHARACTER_LITERAL    shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    BOOLEAN_LITERAL      shift, and go to state 38
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call           go to state 44
    expr                    go to state 206
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 160

   11 body: body statement .

    $default  reduce using rule 11 (body)


state 161

    1 program: declarations INT_TYPE_KEYWORD MAIN_KEYWORD OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return . CLOSING_CURLY_BRACE

    CLOSING_CURLY_BRACE  shift, and go to state 207


state 162

   26 non_if_statement: error_token SEMICOLON .
  126 non_loop_non_if_statement: error_token SEMICOLON .

    IDENTIFIER           reduce using rule 26 (non_if_statement)
    IDENTIFIER           [reduce using rule 126 (non_loop_non_if_statement)]
    INT_TYPE_KEYWORD     reduce using rule 26 (non_if_statement)
    INT_TYPE_KEYWORD     [reduce using rule 126 (non_loop_non_if_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 26 (non_if_statement)
    FLOAT_TYPE_KEYWORD   [reduce using rule 126 (non_loop_non_if_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 26 (non_if_statement)
    STRING_TYPE_KEYWORD  [reduce using rule 126 (non_loop_non_if_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 26 (non_if_statement)
    CHAR_TYPE_KEYWORD    [reduce using rule 126 (non_loop_non_if_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 26 (non_if_statement)
    BOOL_TYPE_KEYWORD    [reduce using rule 126 (non_loop_non_if_statement)]
    IF_KEYWORD           reduce using rule 26 (non_if_statement)
    IF_KEYWORD           [reduce using rule 126 (non_loop_non_if_statement)]
    FOR_KEYWORD          reduce using rule 26 (non_if_statement)
    FOR_KEYWORD          [reduce using rule 126 (non_loop_non_if_statement)]
    WHILE_KEYWORD        reduce using rule 26 (non_if_statement)
    WHILE_KEYWORD        [reduce using rule 126 (non_loop_non_if_statement)]
    SWITCH_KEYWORD       reduce using rule 26 (non_if_statement)
    SWITCH_KEYWORD       [reduce using rule 126 (non_loop_non_if_statement)]
    DO_KEYWORD           reduce using rule 26 (non_if_statement)
    DO_KEYWORD           [reduce using rule 126 (non_loop_non_if_statement)]
    RETURN_KEYWORD       reduce using rule 26 (non_if_statement)
    RETURN_KEYWORD       [reduce using rule 126 (non_loop_non_if_statement)]
    CASE_KEYWORD         reduce using rule 26 (non_if_statement)
    CASE_KEYWORD         [reduce using rule 126 (non_loop_non_if_statement)]
    CONST_KEYWORD        reduce using rule 26 (non_if_statement)
    CONST_KEYWORD        [reduce using rule 126 (non_loop_non_if_statement)]
    BREAK_KEYWORD        reduce using rule 26 (non_if_statement)
    BREAK_KEYWORD        [reduce using rule 126 (non_loop_non_if_statement)]
    CONTINUE_KEYWORD     reduce using rule 26 (non_if_statement)
    CONTINUE_KEYWORD     [reduce using rule 126 (non_loop_non_if_statement)]
    DEFAULT_KEYWORD      reduce using rule 26 (non_if_statement)
    DEFAULT_KEYWORD      [reduce using rule 126 (non_loop_non_if_statement)]
    OPENING_CURLY_BRACE  reduce using rule 26 (non_if_statement)
    OPENING_CURLY_BRACE  [reduce using rule 126 (non_loop_non_if_statement)]
    CLOSING_CURLY_BRACE  reduce using rule 26 (non_if_statement)
    CLOSING_CURLY_BRACE  [reduce using rule 126 (non_loop_non_if_statement)]
    UNRECOGNIZED_TOKEN   reduce using rule 26 (non_if_statement)
    UNRECOGNIZED_TOKEN   [reduce using rule 126 (non_loop_non_if_statement)]
    RESERVED_IDENTIFIER  reduce using rule 26 (non_if_statement)
    RESERVED_IDENTIFIER  [reduce using rule 126 (non_loop_non_if_statement)]
    $default             reduce using rule 26 (non_if_statement)


state 163

   25 non_if_statement: block_structure SEMICOLON .
  125 non_loop_non_if_statement: block_structure SEMICOLON .

    IDENTIFIER           reduce using rule 25 (non_if_statement)
    IDENTIFIER           [reduce using rule 125 (non_loop_non_if_statement)]
    INT_TYPE_KEYWORD     reduce using rule 25 (non_if_statement)
    INT_TYPE_KEYWORD     [reduce using rule 125 (non_loop_non_if_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 25 (non_if_statement)
    FLOAT_TYPE_KEYWORD   [reduce using rule 125 (non_loop_non_if_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 25 (non_if_statement)
    STRING_TYPE_KEYWORD  [reduce using rule 125 (non_loop_non_if_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 25 (non_if_statement)
    CHAR_TYPE_KEYWORD    [reduce using rule 125 (non_loop_non_if_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 25 (non_if_statement)
    BOOL_TYPE_KEYWORD    [reduce using rule 125 (non_loop_non_if_statement)]
    IF_KEYWORD           reduce using rule 25 (non_if_statement)
    IF_KEYWORD           [reduce using rule 125 (non_loop_non_if_statement)]
    FOR_KEYWORD          reduce using rule 25 (non_if_statement)
    FOR_KEYWORD          [reduce using rule 125 (non_loop_non_if_statement)]
    WHILE_KEYWORD        reduce using rule 25 (non_if_statement)
    WHILE_KEYWORD        [reduce using rule 125 (non_loop_non_if_statement)]
    SWITCH_KEYWORD       reduce using rule 25 (non_if_statement)
    SWITCH_KEYWORD       [reduce using rule 125 (non_loop_non_if_statement)]
    DO_KEYWORD           reduce using rule 25 (non_if_statement)
    DO_KEYWORD           [reduce using rule 125 (non_loop_non_if_statement)]
    RETURN_KEYWORD       reduce using rule 25 (non_if_statement)
    RETURN_KEYWORD       [reduce using rule 125 (non_loop_non_if_statement)]
    CASE_KEYWORD         reduce using rule 25 (non_if_statement)
    CASE_KEYWORD         [reduce using rule 125 (non_loop_non_if_statement)]
    CONST_KEYWORD        reduce using rule 25 (non_if_statement)
    CONST_KEYWORD        [reduce using rule 125 (non_loop_non_if_statement)]
    BREAK_KEYWORD        reduce using rule 25 (non_if_statement)
    BREAK_KEYWORD        [reduce using rule 125 (non_loop_non_if_statement)]
    CONTINUE_KEYWORD     reduce using rule 25 (non_if_statement)
    CONTINUE_KEYWORD     [reduce using rule 125 (non_loop_non_if_statement)]
    DEFAULT_KEYWORD      reduce using rule 25 (non_if_statement)
    DEFAULT_KEYWORD      [reduce using rule 125 (non_loop_non_if_statement)]
    OPENING_CURLY_BRACE  reduce using rule 25 (non_if_statement)
    OPENING_CURLY_BRACE  [reduce using rule 125 (non_loop_non_if_statement)]
    CLOSING_CURLY_BRACE  reduce using rule 25 (non_if_statement)
    CLOSING_CURLY_BRACE  [reduce using rule 125 (non_loop_non_if_statement)]
    UNRECOGNIZED_TOKEN   reduce using rule 25 (non_if_statement)
    UNRECOGNIZED_TOKEN   [reduce using rule 125 (non_loop_non_if_statement)]
    RESERVED_IDENTIFIER  reduce using rule 25 (non_if_statement)
    RESERVED_IDENTIFIER  [reduce using rule 125 (non_loop_non_if_statement)]
    $default             reduce using rule 25 (non_if_statement)


state 164

   19 non_if_statement: declaration SEMICOLON .
  123 non_loop_non_if_statement: declaration SEMICOLON .

    IDENTIFIER           reduce using rule 19 (non_if_statement)
    IDENTIFIER           [reduce using rule 123 (non_loop_non_if_statement)]
    INT_TYPE_KEYWORD     reduce using rule 19 (non_if_statement)
    INT_TYPE_KEYWORD     [reduce using rule 123 (non_loop_non_if_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 19 (non_if_statement)
    FLOAT_TYPE_KEYWORD   [reduce using rule 123 (non_loop_non_if_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 19 (non_if_statement)
    STRING_TYPE_KEYWORD  [reduce using rule 123 (non_loop_non_if_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 19 (non_if_statement)
    CHAR_TYPE_KEYWORD    [reduce using rule 123 (non_loop_non_if_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 19 (non_if_statement)
    BOOL_TYPE_KEYWORD    [reduce using rule 123 (non_loop_non_if_statement)]
    IF_KEYWORD           reduce using rule 19 (non_if_statement)
    IF_KEYWORD           [reduce using rule 123 (non_loop_non_if_statement)]
    FOR_KEYWORD          reduce using rule 19 (non_if_statement)
    FOR_KEYWORD          [reduce using rule 123 (non_loop_non_if_statement)]
    WHILE_KEYWORD        reduce using rule 19 (non_if_statement)
    WHILE_KEYWORD        [reduce using rule 123 (non_loop_non_if_statement)]
    SWITCH_KEYWORD       reduce using rule 19 (non_if_statement)
    SWITCH_KEYWORD       [reduce using rule 123 (non_loop_non_if_statement)]
    DO_KEYWORD           reduce using rule 19 (non_if_statement)
    DO_KEYWORD           [reduce using rule 123 (non_loop_non_if_statement)]
    RETURN_KEYWORD       reduce using rule 19 (non_if_statement)
    RETURN_KEYWORD       [reduce using rule 123 (non_loop_non_if_statement)]
    CASE_KEYWORD         reduce using rule 19 (non_if_statement)
    CASE_KEYWORD         [reduce using rule 123 (non_loop_non_if_statement)]
    CONST_KEYWORD        reduce using rule 19 (non_if_statement)
    CONST_KEYWORD        [reduce using rule 123 (non_loop_non_if_statement)]
    BREAK_KEYWORD        reduce using rule 19 (non_if_statement)
    BREAK_KEYWORD        [reduce using rule 123 (non_loop_non_if_statement)]
    CONTINUE_KEYWORD     reduce using rule 19 (non_if_statement)
    CONTINUE_KEYWORD     [reduce using rule 123 (non_loop_non_if_statement)]
    DEFAULT_KEYWORD      reduce using rule 19 (non_if_statement)
    DEFAULT_KEYWORD      [reduce using rule 123 (non_loop_non_if_statement)]
    OPENING_CURLY_BRACE  reduce using rule 19 (non_if_statement)
    OPENING_CURLY_BRACE  [reduce using rule 123 (non_loop_non_if_statement)]
    CLOSING_CURLY_BRACE  reduce using rule 19 (non_if_statement)
    CLOSING_CURLY_BRACE  [reduce using rule 123 (non_loop_non_if_statement)]
    UNRECOGNIZED_TOKEN   reduce using rule 19 (non_if_statement)
    UNRECOGNIZED_TOKEN   [reduce using rule 123 (non_loop_non_if_statement)]
    RESERVED_IDENTIFIER  reduce using rule 19 (non_if_statement)
    RESERVED_IDENTIFIER  [reduce using rule 123 (non_loop_non_if_statement)]
    $default             reduce using rule 19 (non_if_statement)


state 165

   17 non_if_statement: assignment SEMICOLON .
  121 non_loop_non_if_statement: assignment SEMICOLON .

    IDENTIFIER           reduce using rule 17 (non_if_statement)
    IDENTIFIER           [reduce using rule 121 (non_loop_non_if_statement)]
    INT_TYPE_KEYWORD     reduce using rule 17 (non_if_statement)
    INT_TYPE_KEYWORD     [reduce using rule 121 (non_loop_non_if_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 17 (non_if_statement)
    FLOAT_TYPE_KEYWORD   [reduce using rule 121 (non_loop_non_if_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 17 (non_if_statement)
    STRING_TYPE_KEYWORD  [reduce using rule 121 (non_loop_non_if_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 17 (non_if_statement)
    CHAR_TYPE_KEYWORD    [reduce using rule 121 (non_loop_non_if_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 17 (non_if_statement)
    BOOL_TYPE_KEYWORD    [reduce using rule 121 (non_loop_non_if_statement)]
    IF_KEYWORD           reduce using rule 17 (non_if_statement)
    IF_KEYWORD           [reduce using rule 121 (non_loop_non_if_statement)]
    FOR_KEYWORD          reduce using rule 17 (non_if_statement)
    FOR_KEYWORD          [reduce using rule 121 (non_loop_non_if_statement)]
    WHILE_KEYWORD        reduce using rule 17 (non_if_statement)
    WHILE_KEYWORD        [reduce using rule 121 (non_loop_non_if_statement)]
    SWITCH_KEYWORD       reduce using rule 17 (non_if_statement)
    SWITCH_KEYWORD       [reduce using rule 121 (non_loop_non_if_statement)]
    DO_KEYWORD           reduce using rule 17 (non_if_statement)
    DO_KEYWORD           [reduce using rule 121 (non_loop_non_if_statement)]
    RETURN_KEYWORD       reduce using rule 17 (non_if_statement)
    RETURN_KEYWORD       [reduce using rule 121 (non_loop_non_if_statement)]
    CASE_KEYWORD         reduce using rule 17 (non_if_statement)
    CASE_KEYWORD         [reduce using rule 121 (non_loop_non_if_statement)]
    CONST_KEYWORD        reduce using rule 17 (non_if_statement)
    CONST_KEYWORD        [reduce using rule 121 (non_loop_non_if_statement)]
    BREAK_KEYWORD        reduce using rule 17 (non_if_statement)
    BREAK_KEYWORD        [reduce using rule 121 (non_loop_non_if_statement)]
    CONTINUE_KEYWORD     reduce using rule 17 (non_if_statement)
    CONTINUE_KEYWORD     [reduce using rule 121 (non_loop_non_if_statement)]
    DEFAULT_KEYWORD      reduce using rule 17 (non_if_statement)
    DEFAULT_KEYWORD      [reduce using rule 121 (non_loop_non_if_statement)]
    OPENING_CURLY_BRACE  reduce using rule 17 (non_if_statement)
    OPENING_CURLY_BRACE  [reduce using rule 121 (non_loop_non_if_statement)]
    CLOSING_CURLY_BRACE  reduce using rule 17 (non_if_statement)
    CLOSING_CURLY_BRACE  [reduce using rule 121 (non_loop_non_if_statement)]
    UNRECOGNIZED_TOKEN   reduce using rule 17 (non_if_statement)
    UNRECOGNIZED_TOKEN   [reduce using rule 121 (non_loop_non_if_statement)]
    RESERVED_IDENTIFIER  reduce using rule 17 (non_if_statement)
    RESERVED_IDENTIFIER  [reduce using rule 121 (non_loop_non_if_statement)]
    $default             reduce using rule 17 (non_if_statement)


state 166

   18 non_if_statement: initialization SEMICOLON .
  122 non_loop_non_if_statement: initialization SEMICOLON .

    IDENTIFIER           reduce using rule 18 (non_if_statement)
    IDENTIFIER           [reduce using rule 122 (non_loop_non_if_statement)]
    INT_TYPE_KEYWORD     reduce using rule 18 (non_if_statement)
    INT_TYPE_KEYWORD     [reduce using rule 122 (non_loop_non_if_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 18 (non_if_statement)
    FLOAT_TYPE_KEYWORD   [reduce using rule 122 (non_loop_non_if_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 18 (non_if_statement)
    STRING_TYPE_KEYWORD  [reduce using rule 122 (non_loop_non_if_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 18 (non_if_statement)
    CHAR_TYPE_KEYWORD    [reduce using rule 122 (non_loop_non_if_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 18 (non_if_statement)
    BOOL_TYPE_KEYWORD    [reduce using rule 122 (non_loop_non_if_statement)]
    IF_KEYWORD           reduce using rule 18 (non_if_statement)
    IF_KEYWORD           [reduce using rule 122 (non_loop_non_if_statement)]
    FOR_KEYWORD          reduce using rule 18 (non_if_statement)
    FOR_KEYWORD          [reduce using rule 122 (non_loop_non_if_statement)]
    WHILE_KEYWORD        reduce using rule 18 (non_if_statement)
    WHILE_KEYWORD        [reduce using rule 122 (non_loop_non_if_statement)]
    SWITCH_KEYWORD       reduce using rule 18 (non_if_statement)
    SWITCH_KEYWORD       [reduce using rule 122 (non_loop_non_if_statement)]
    DO_KEYWORD           reduce using rule 18 (non_if_statement)
    DO_KEYWORD           [reduce using rule 122 (non_loop_non_if_statement)]
    RETURN_KEYWORD       reduce using rule 18 (non_if_statement)
    RETURN_KEYWORD       [reduce using rule 122 (non_loop_non_if_statement)]
    CASE_KEYWORD         reduce using rule 18 (non_if_statement)
    CASE_KEYWORD         [reduce using rule 122 (non_loop_non_if_statement)]
    CONST_KEYWORD        reduce using rule 18 (non_if_statement)
    CONST_KEYWORD        [reduce using rule 122 (non_loop_non_if_statement)]
    BREAK_KEYWORD        reduce using rule 18 (non_if_statement)
    BREAK_KEYWORD        [reduce using rule 122 (non_loop_non_if_statement)]
    CONTINUE_KEYWORD     reduce using rule 18 (non_if_statement)
    CONTINUE_KEYWORD     [reduce using rule 122 (non_loop_non_if_statement)]
    DEFAULT_KEYWORD      reduce using rule 18 (non_if_statement)
    DEFAULT_KEYWORD      [reduce using rule 122 (non_loop_non_if_statement)]
    OPENING_CURLY_BRACE  reduce using rule 18 (non_if_statement)
    OPENING_CURLY_BRACE  [reduce using rule 122 (non_loop_non_if_statement)]
    CLOSING_CURLY_BRACE  reduce using rule 18 (non_if_statement)
    CLOSING_CURLY_BRACE  [reduce using rule 122 (non_loop_non_if_statement)]
    UNRECOGNIZED_TOKEN   reduce using rule 18 (non_if_statement)
    UNRECOGNIZED_TOKEN   [reduce using rule 122 (non_loop_non_if_statement)]
    RESERVED_IDENTIFIER  reduce using rule 18 (non_if_statement)
    RESERVED_IDENTIFIER  [reduce using rule 122 (non_loop_non_if_statement)]
    $default             reduce using rule 18 (non_if_statement)


state 167

   20 non_if_statement: function_call SEMICOLON .
  124 non_loop_non_if_statement: function_call SEMICOLON .

    IDENTIFIER           reduce using rule 20 (non_if_statement)
    IDENTIFIER           [reduce using rule 124 (non_loop_non_if_statement)]
    INT_TYPE_KEYWORD     reduce using rule 20 (non_if_statement)
    INT_TYPE_KEYWORD     [reduce using rule 124 (non_loop_non_if_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 20 (non_if_statement)
    FLOAT_TYPE_KEYWORD   [reduce using rule 124 (non_loop_non_if_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 20 (non_if_statement)
    STRING_TYPE_KEYWORD  [reduce using rule 124 (non_loop_non_if_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 20 (non_if_statement)
    CHAR_TYPE_KEYWORD    [reduce using rule 124 (non_loop_non_if_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 20 (non_if_statement)
    BOOL_TYPE_KEYWORD    [reduce using rule 124 (non_loop_non_if_statement)]
    IF_KEYWORD           reduce using rule 20 (non_if_statement)
    IF_KEYWORD           [reduce using rule 124 (non_loop_non_if_statement)]
    FOR_KEYWORD          reduce using rule 20 (non_if_statement)
    FOR_KEYWORD          [reduce using rule 124 (non_loop_non_if_statement)]
    WHILE_KEYWORD        reduce using rule 20 (non_if_statement)
    WHILE_KEYWORD        [reduce using rule 124 (non_loop_non_if_statement)]
    SWITCH_KEYWORD       reduce using rule 20 (non_if_statement)
    SWITCH_KEYWORD       [reduce using rule 124 (non_loop_non_if_statement)]
    DO_KEYWORD           reduce using rule 20 (non_if_statement)
    DO_KEYWORD           [reduce using rule 124 (non_loop_non_if_statement)]
    RETURN_KEYWORD       reduce using rule 20 (non_if_statement)
    RETURN_KEYWORD       [reduce using rule 124 (non_loop_non_if_statement)]
    CASE_KEYWORD         reduce using rule 20 (non_if_statement)
    CASE_KEYWORD         [reduce using rule 124 (non_loop_non_if_statement)]
    CONST_KEYWORD        reduce using rule 20 (non_if_statement)
    CONST_KEYWORD        [reduce using rule 124 (non_loop_non_if_statement)]
    BREAK_KEYWORD        reduce using rule 20 (non_if_statement)
    BREAK_KEYWORD        [reduce using rule 124 (non_loop_non_if_statement)]
    CONTINUE_KEYWORD     reduce using rule 20 (non_if_statement)
    CONTINUE_KEYWORD     [reduce using rule 124 (non_loop_non_if_statement)]
    DEFAULT_KEYWORD      reduce using rule 20 (non_if_statement)
    DEFAULT_KEYWORD      [reduce using rule 124 (non_loop_non_if_statement)]
    OPENING_CURLY_BRACE  reduce using rule 20 (non_if_statement)
    OPENING_CURLY_BRACE  [reduce using rule 124 (non_loop_non_if_statement)]
    CLOSING_CURLY_BRACE  reduce using rule 20 (non_if_statement)
    CLOSING_CURLY_BRACE  [reduce using rule 124 (non_loop_non_if_statement)]
    UNRECOGNIZED_TOKEN   reduce using rule 20 (non_if_statement)
    UNRECOGNIZED_TOKEN   [reduce using rule 124 (non_loop_non_if_statement)]
    RESERVED_IDENTIFIER  reduce using rule 20 (non_if_statement)
    RESERVED_IDENTIFIER  [reduce using rule 124 (non_loop_non_if_statement)]
    $default             reduce using rule 20 (non_if_statement)


state 168

  108 non_if_statements: non_if_statements non_if_statement .

    $default  reduce using rule 108 (non_if_statements)


state 169

   26 non_if_statement: error_token . SEMICOLON

    SEMICOLON  shift, and go to state 208


state 170

   25 non_if_statement: block_structure . SEMICOLON

    SEMICOLON  shift, and go to state 209


state 171

   19 non_if_statement: declaration . SEMICOLON

    SEMICOLON  shift, and go to state 210


state 172

   17 non_if_statement: assignment . SEMICOLON

    SEMICOLON  shift, and go to state 211


state 173

   18 non_if_statement: initialization . SEMICOLON

    SEMICOLON  shift, and go to state 212


state 174

   20 non_if_statement: function_call . SEMICOLON

    SEMICOLON  shift, and go to state 213


state 175

   21 non_if_statement: for .

    $default  reduce using rule 21 (non_if_statement)


state 176

   22 non_if_statement: while .

    $default  reduce using rule 22 (non_if_statement)


state 177

   23 non_if_statement: do_while .

    $default  reduce using rule 23 (non_if_statement)


state 178

   24 non_if_statement: switch .

    $default  reduce using rule 24 (non_if_statement)


state 179

    6 function_declaration: VOID_TYPE_KEYWORD IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body . return CLOSING_CURLY_BRACE
   11 body: body . statement

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    RETURN_KEYWORD       shift, and go to state 159
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    statement                  go to state 160
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    return                     go to state 214
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 180

   38 initialization: const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS . expr_list CLOSING_SQUARE_BRACKETS

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    CHARACTER_LITERAL    shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    BOOLEAN_LITERAL      shift, and go to state 38
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    $default  reduce using rule 42 (expr_list)

    function_call           go to state 44
    expr_list               go to state 215
    expr                    go to state 131
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 181

   39 function_call: IDENTIFIER OPENING_PARENTHESIS expr_list CLOSING_PARENTHESIS .

    $default  reduce using rule 39 (function_call)


state 182

   41 expr_list: expr_list COMMA . expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    CHARACTER_LITERAL    shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    BOOLEAN_LITERAL      shift, and go to state 38
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call           go to state 44
    expr                    go to state 216
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 183

   49 array_element: IDENTIFIER OPENING_SQUARE_BRACKETS expr CLOSING_SQUARE_BRACKETS .

    $default  reduce using rule 49 (array_element)


state 184

    7 function_declaration: type IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body . return CLOSING_CURLY_BRACE
   11 body: body . statement

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    RETURN_KEYWORD       shift, and go to state 159
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    statement                  go to state 160
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    return                     go to state 217
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 185

   36 assignment: IDENTIFIER OPENING_SQUARE_BRACKETS expr . CLOSING_SQUARE_BRACKETS ASSIGNMENT expr

    CLOSING_SQUARE_BRACKETS  shift, and go to state 218


state 186

   35 assignment: IDENTIFIER ASSIGNMENT OPENING_SQUARE_BRACKETS . expr_list CLOSING_SQUARE_BRACKETS

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    CHARACTER_LITERAL    shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    BOOLEAN_LITERAL      shift, and go to state 38
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    $default  reduce using rule 42 (expr_list)

    function_call           go to state 44
    expr_list               go to state 219
    expr                    go to state 131
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 187

   34 assignment: IDENTIFIER ASSIGNMENT expr .

    $default  reduce using rule 34 (assignment)


state 188

  105 matched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD matched_statement
  109 unmatched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS body
  110                    | IF_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD unmatched_statement

    CLOSING_PARENTHESIS  shift, and go to state 220


state 189

   34 assignment: IDENTIFIER . ASSIGNMENT expr
   35           | IDENTIFIER . ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS
   36           | IDENTIFIER . OPENING_SQUARE_BRACKETS expr CLOSING_SQUARE_BRACKETS ASSIGNMENT expr

    OPENING_SQUARE_BRACKETS  shift, and go to state 151
    ASSIGNMENT               shift, and go to state 152


state 190

   37 initialization: const . type_identifier ASSIGNMENT expr
   38               | const . type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    INT_TYPE_KEYWORD     shift, and go to state 18
    FLOAT_TYPE_KEYWORD   shift, and go to state 5
    STRING_TYPE_KEYWORD  shift, and go to state 6
    CHAR_TYPE_KEYWORD    shift, and go to state 7
    BOOL_TYPE_KEYWORD    shift, and go to state 8

    type_identifier  go to state 221
    type             go to state 20


state 191

  137 loop_start: assignment .

    $default  reduce using rule 137 (loop_start)


state 192

  138 loop_start: initialization .

    $default  reduce using rule 138 (loop_start)


state 193

  136 for: FOR_KEYWORD OPENING_PARENTHESIS loop_start . SEMICOLON bool_expr SEMICOLON assignment CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    SEMICOLON  shift, and go to state 222


state 194

  139 while: WHILE_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    CLOSING_PARENTHESIS  shift, and go to state 223


state 195

  141 switch: SWITCH_KEYWORD OPENING_PARENTHESIS expr . CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list CLOSING_CURLY_BRACE
  142       | SWITCH_KEYWORD OPENING_PARENTHESIS expr . CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list DEFAULT_KEYWORD COLON body CLOSING_CURLY_BRACE

    CLOSING_PARENTHESIS  shift, and go to state 224


state 196

  113 matched_if_in_loop: IF_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block ELSE_KEYWORD matched_if_in_loop
  115 unmatched_if_in_loop: IF_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block
  116                     | IF_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_if_in_loop ELSE_KEYWORD unmatched_if_in_loop

    OPENING_PARENTHESIS  shift, and go to state 225


state 197

  108 non_if_statements: non_if_statements . non_if_statement
  114 matched_if_in_loop: non_if_statements .

    IDENTIFIER           shift, and go to state 99
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 114 (matched_if_in_loop)]
    INT_TYPE_KEYWORD     reduce using rule 31 (const)
    INT_TYPE_KEYWORD     [reduce using rule 114 (matched_if_in_loop)]
    FLOAT_TYPE_KEYWORD   reduce using rule 31 (const)
    FLOAT_TYPE_KEYWORD   [reduce using rule 114 (matched_if_in_loop)]
    STRING_TYPE_KEYWORD  reduce using rule 31 (const)
    STRING_TYPE_KEYWORD  [reduce using rule 114 (matched_if_in_loop)]
    CHAR_TYPE_KEYWORD    reduce using rule 31 (const)
    CHAR_TYPE_KEYWORD    [reduce using rule 114 (matched_if_in_loop)]
    BOOL_TYPE_KEYWORD    reduce using rule 31 (const)
    BOOL_TYPE_KEYWORD    [reduce using rule 114 (matched_if_in_loop)]
    IF_KEYWORD           reduce using rule 114 (matched_if_in_loop)
    ELSE_KEYWORD         reduce using rule 114 (matched_if_in_loop)
    FOR_KEYWORD          [reduce using rule 114 (matched_if_in_loop)]
    WHILE_KEYWORD        [reduce using rule 114 (matched_if_in_loop)]
    SWITCH_KEYWORD       [reduce using rule 114 (matched_if_in_loop)]
    DO_KEYWORD           [reduce using rule 114 (matched_if_in_loop)]
    CONST_KEYWORD        [reduce using rule 114 (matched_if_in_loop)]
    OPENING_CURLY_BRACE  [reduce using rule 114 (matched_if_in_loop)]
    CLOSING_CURLY_BRACE  reduce using rule 114 (matched_if_in_loop)
    UNRECOGNIZED_TOKEN   [reduce using rule 114 (matched_if_in_loop)]
    RESERVED_IDENTIFIER  [reduce using rule 114 (matched_if_in_loop)]
    $default             reduce using rule 31 (const)

    non_if_statement  go to state 168
    error_token       go to state 169
    block_structure   go to state 170
    const             go to state 12
    declaration       go to state 171
    assignment        go to state 172
    initialization    go to state 173
    function_call     go to state 174
    for               go to state 175
    while             go to state 176
    do_while          go to state 177
    switch            go to state 178


state 198

  118 loop_body_statement: if_in_loop .

    $default  reduce using rule 118 (loop_body_statement)


state 199

  111 if_in_loop: matched_if_in_loop .

    $default  reduce using rule 111 (if_in_loop)


state 200

  112 if_in_loop: unmatched_if_in_loop .

    $default  reduce using rule 112 (if_in_loop)


state 201

  134 loop_body_statements: loop_body_statement .

    $default  reduce using rule 134 (loop_body_statements)


state 202

  119 loop_body_statement: non_loop_non_if_statement .

    $default  reduce using rule 119 (loop_body_statement)


state 203

  120 loop_body_statement: loop_statement .

    $default  reduce using rule 120 (loop_body_statement)


state 204

  135 loop_body_statements: loop_body_statements . loop_body_statement
  140 do_while: DO_KEYWORD OPENING_CURLY_BRACE loop_body_statements . CLOSING_CURLY_BRACE WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS SEMICOLON

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 196
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    CLOSING_CURLY_BRACE  shift, and go to state 226
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    non_if_statements          go to state 197
    if_in_loop                 go to state 198
    matched_if_in_loop         go to state 199
    unmatched_if_in_loop       go to state 200
    loop_body_statement        go to state 227
    non_loop_non_if_statement  go to state 202
    loop_statement             go to state 203
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 205

   29 block_structure: OPENING_CURLY_BRACE body CLOSING_CURLY_BRACE .

    $default  reduce using rule 29 (block_structure)


state 206

   90 return: RETURN_KEYWORD expr . SEMICOLON

    SEMICOLON  shift, and go to state 228


state 207

    1 program: declarations INT_TYPE_KEYWORD MAIN_KEYWORD OPENING_PARENTHESIS CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE .

    $default  reduce using rule 1 (program)


state 208

   26 non_if_statement: error_token SEMICOLON .

    $default  reduce using rule 26 (non_if_statement)


state 209

   25 non_if_statement: block_structure SEMICOLON .

    $default  reduce using rule 25 (non_if_statement)


state 210

   19 non_if_statement: declaration SEMICOLON .

    $default  reduce using rule 19 (non_if_statement)


state 211

   17 non_if_statement: assignment SEMICOLON .

    $default  reduce using rule 17 (non_if_statement)


state 212

   18 non_if_statement: initialization SEMICOLON .

    $default  reduce using rule 18 (non_if_statement)


state 213

   20 non_if_statement: function_call SEMICOLON .

    $default  reduce using rule 20 (non_if_statement)


state 214

    6 function_declaration: VOID_TYPE_KEYWORD IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return . CLOSING_CURLY_BRACE

    CLOSING_CURLY_BRACE  shift, and go to state 229


state 215

   38 initialization: const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list . CLOSING_SQUARE_BRACKETS
   41 expr_list: expr_list . COMMA expr

    CLOSING_SQUARE_BRACKETS  shift, and go to state 230
    COMMA                    shift, and go to state 182


state 216

   41 expr_list: expr_list COMMA expr .

    $default  reduce using rule 41 (expr_list)


state 217

    7 function_declaration: type IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return . CLOSING_CURLY_BRACE

    CLOSING_CURLY_BRACE  shift, and go to state 231


state 218

   36 assignment: IDENTIFIER OPENING_SQUARE_BRACKETS expr CLOSING_SQUARE_BRACKETS . ASSIGNMENT expr

    ASSIGNMENT  shift, and go to state 232


state 219

   35 assignment: IDENTIFIER ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list . CLOSING_SQUARE_BRACKETS
   41 expr_list: expr_list . COMMA expr

    CLOSING_SQUARE_BRACKETS  shift, and go to state 233
    COMMA                    shift, and go to state 182


state 220

  105 matched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . matched_statement ELSE_KEYWORD matched_statement
  109 unmatched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . body
  110                    | IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . matched_statement ELSE_KEYWORD unmatched_statement

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 13 (body)]
    INT_TYPE_KEYWORD     reduce using rule 13 (body)
    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   reduce using rule 13 (body)
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  reduce using rule 13 (body)
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    reduce using rule 13 (body)
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    reduce using rule 13 (body)
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]
    IF_KEYWORD           [reduce using rule 13 (body)]
    FOR_KEYWORD          [reduce using rule 13 (body)]
    WHILE_KEYWORD        [reduce using rule 13 (body)]
    SWITCH_KEYWORD       [reduce using rule 13 (body)]
    DO_KEYWORD           [reduce using rule 13 (body)]
    CONST_KEYWORD        [reduce using rule 13 (body)]
    OPENING_CURLY_BRACE  [reduce using rule 13 (body)]
    UNRECOGNIZED_TOKEN   [reduce using rule 13 (body)]
    RESERVED_IDENTIFIER  [reduce using rule 13 (body)]
    $default             reduce using rule 13 (body)

    body                       go to state 234
    statement                  go to state 109
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 235
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 221

   37 initialization: const type_identifier . ASSIGNMENT expr
   38               | const type_identifier . OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    OPENING_SQUARE_BRACKETS  shift, and go to state 236
    ASSIGNMENT               shift, and go to state 27


state 222

  136 for: FOR_KEYWORD OPENING_PARENTHESIS loop_start SEMICOLON . bool_expr SEMICOLON assignment CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    BOOLEAN_LITERAL      shift, and go to state 70
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call           go to state 71
    array_element           go to state 72
    arithmetic_expr         go to state 73
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 237
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    numeric_literal         go to state 75


state 223

  139 while: WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    OPENING_CURLY_BRACE  shift, and go to state 238


state 224

  141 switch: SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS . OPENING_CURLY_BRACE case_list CLOSING_CURLY_BRACE
  142       | SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS . OPENING_CURLY_BRACE case_list DEFAULT_KEYWORD COLON body CLOSING_CURLY_BRACE

    OPENING_CURLY_BRACE  shift, and go to state 239


state 225

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS loop_block ELSE_KEYWORD matched_if_in_loop
  115 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS loop_block
  116                     | IF_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS matched_if_in_loop ELSE_KEYWORD unmatched_if_in_loop

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    BOOLEAN_LITERAL      shift, and go to state 70
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call           go to state 71
    array_element           go to state 72
    arithmetic_expr         go to state 73
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 240
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    numeric_literal         go to state 75


state 226

  140 do_while: DO_KEYWORD OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE . WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS SEMICOLON

    WHILE_KEYWORD  shift, and go to state 241


state 227

  135 loop_body_statements: loop_body_statements loop_body_statement .

    $default  reduce using rule 135 (loop_body_statements)


state 228

   90 return: RETURN_KEYWORD expr SEMICOLON .

    $default  reduce using rule 90 (return)


state 229

    6 function_declaration: VOID_TYPE_KEYWORD IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE .

    $default  reduce using rule 6 (function_declaration)


state 230

   38 initialization: const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS .

    $default  reduce using rule 38 (initialization)


state 231

    7 function_declaration: type IDENTIFIER OPENING_PARENTHESIS function_arguments CLOSING_PARENTHESIS OPENING_CURLY_BRACE body return CLOSING_CURLY_BRACE .

    $default  reduce using rule 7 (function_declaration)


state 232

   36 assignment: IDENTIFIER OPENING_SQUARE_BRACKETS expr CLOSING_SQUARE_BRACKETS ASSIGNMENT . expr

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    CHARACTER_LITERAL    shift, and go to state 36
    STRING_LITERAL       shift, and go to state 37
    BOOLEAN_LITERAL      shift, and go to state 38
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42
    BITWISE_NOT          shift, and go to state 43

    function_call           go to state 44
    expr                    go to state 242
    array_element           go to state 46
    arithmetic_expr         go to state 47
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 52
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    bitwise_expr            go to state 57
    bitwise_xor_expr        go to state 58
    bitwise_and_expr        go to state 59
    bitwise_not_expr        go to state 60
    literal                 go to state 61
    numeric_literal         go to state 62


state 233

   35 assignment: IDENTIFIER ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS .

    $default  reduce using rule 35 (assignment)


state 234

   11 body: body . statement
  109 unmatched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS body .

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 109 (unmatched_statement)]
    INT_TYPE_KEYWORD     reduce using rule 31 (const)
    INT_TYPE_KEYWORD     [reduce using rule 109 (unmatched_statement)]
    FLOAT_TYPE_KEYWORD   reduce using rule 31 (const)
    FLOAT_TYPE_KEYWORD   [reduce using rule 109 (unmatched_statement)]
    STRING_TYPE_KEYWORD  reduce using rule 31 (const)
    STRING_TYPE_KEYWORD  [reduce using rule 109 (unmatched_statement)]
    CHAR_TYPE_KEYWORD    reduce using rule 31 (const)
    CHAR_TYPE_KEYWORD    [reduce using rule 109 (unmatched_statement)]
    BOOL_TYPE_KEYWORD    reduce using rule 31 (const)
    BOOL_TYPE_KEYWORD    [reduce using rule 109 (unmatched_statement)]
    IF_KEYWORD           [reduce using rule 109 (unmatched_statement)]
    FOR_KEYWORD          [reduce using rule 109 (unmatched_statement)]
    WHILE_KEYWORD        [reduce using rule 109 (unmatched_statement)]
    SWITCH_KEYWORD       [reduce using rule 109 (unmatched_statement)]
    DO_KEYWORD           [reduce using rule 109 (unmatched_statement)]
    CONST_KEYWORD        [reduce using rule 109 (unmatched_statement)]
    OPENING_CURLY_BRACE  [reduce using rule 109 (unmatched_statement)]
    UNRECOGNIZED_TOKEN   [reduce using rule 109 (unmatched_statement)]
    RESERVED_IDENTIFIER  [reduce using rule 109 (unmatched_statement)]
    $default             reduce using rule 109 (unmatched_statement)

    statement                  go to state 160
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 235

  103 if: matched_statement .
  105 matched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_statement . ELSE_KEYWORD matched_statement
  110 unmatched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_statement . ELSE_KEYWORD unmatched_statement

    ELSE_KEYWORD  shift, and go to state 243

    $default  reduce using rule 103 (if)


state 236

   38 initialization: const type_identifier OPENING_SQUARE_BRACKETS . INTEGER_LITERAL CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    INTEGER_LITERAL  shift, and go to state 244


state 237

  136 for: FOR_KEYWORD OPENING_PARENTHESIS loop_start SEMICOLON bool_expr . SEMICOLON assignment CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    SEMICOLON  shift, and go to state 245


state 238

  139 while: WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE . loop_body_statements CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 196
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    non_if_statements          go to state 197
    if_in_loop                 go to state 198
    matched_if_in_loop         go to state 199
    unmatched_if_in_loop       go to state 200
    loop_body_statement        go to state 201
    non_loop_non_if_statement  go to state 202
    loop_statement             go to state 203
    loop_body_statements       go to state 246
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 239

  141 switch: SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE . case_list CLOSING_CURLY_BRACE
  142       | SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE . case_list DEFAULT_KEYWORD COLON body CLOSING_CURLY_BRACE

    CASE_KEYWORD  shift, and go to state 247

    CASE_KEYWORD  [reduce using rule 145 (case_list)]
    $default      reduce using rule 145 (case_list)

    case_list       go to state 248
    case_statement  go to state 249


state 240

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS loop_block ELSE_KEYWORD matched_if_in_loop
  115 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS loop_block
  116                     | IF_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS matched_if_in_loop ELSE_KEYWORD unmatched_if_in_loop

    CLOSING_PARENTHESIS  shift, and go to state 250


state 241

  140 do_while: DO_KEYWORD OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE WHILE_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS SEMICOLON

    OPENING_PARENTHESIS  shift, and go to state 251


state 242

   36 assignment: IDENTIFIER OPENING_SQUARE_BRACKETS expr CLOSING_SQUARE_BRACKETS ASSIGNMENT expr .

    $default  reduce using rule 36 (assignment)


state 243

  105 matched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD . matched_statement
  110 unmatched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD . unmatched_statement

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    non_if_statement     go to state 110
    error_token          go to state 169
    block_structure      go to state 170
    const                go to state 12
    declaration          go to state 171
    assignment           go to state 172
    initialization       go to state 173
    function_call        go to state 174
    matched_statement    go to state 252
    non_if_statements    go to state 119
    unmatched_statement  go to state 253
    for                  go to state 175
    while                go to state 176
    do_while             go to state 177
    switch               go to state 178


state 244

   38 initialization: const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL . CLOSING_SQUARE_BRACKETS ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    CLOSING_SQUARE_BRACKETS  shift, and go to state 254


state 245

  136 for: FOR_KEYWORD OPENING_PARENTHESIS loop_start SEMICOLON bool_expr SEMICOLON . assignment CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    IDENTIFIER  shift, and go to state 189

    assignment  go to state 255


state 246

  135 loop_body_statements: loop_body_statements . loop_body_statement
  139 while: WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements . CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 196
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    CLOSING_CURLY_BRACE  shift, and go to state 256
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    non_if_statements          go to state 197
    if_in_loop                 go to state 198
    matched_if_in_loop         go to state 199
    unmatched_if_in_loop       go to state 200
    loop_body_statement        go to state 227
    non_loop_non_if_statement  go to state 202
    loop_statement             go to state 203
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 247

  146 case_statement: CASE_KEYWORD . IDENTIFIER COLON body
  147               | CASE_KEYWORD . literal COLON body

    INTEGER_LITERAL    shift, and go to state 34
    FLOAT_LITERAL      shift, and go to state 35
    CHARACTER_LITERAL  shift, and go to state 36
    STRING_LITERAL     shift, and go to state 37
    BOOLEAN_LITERAL    shift, and go to state 257
    IDENTIFIER         shift, and go to state 258

    literal          go to state 259
    numeric_literal  go to state 260


state 248

  141 switch: SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list . CLOSING_CURLY_BRACE
  142       | SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list . DEFAULT_KEYWORD COLON body CLOSING_CURLY_BRACE
  143 case_list: case_list . case_statement

    CASE_KEYWORD         shift, and go to state 247
    DEFAULT_KEYWORD      shift, and go to state 261
    CLOSING_CURLY_BRACE  shift, and go to state 262

    case_statement  go to state 263


state 249

  144 case_list: case_statement .

    $default  reduce using rule 144 (case_list)


state 250

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . loop_block ELSE_KEYWORD matched_if_in_loop
  115 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . loop_block
  116                     | IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . matched_if_in_loop ELSE_KEYWORD unmatched_if_in_loop

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 264
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 265
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    non_if_statement    go to state 110
    error_token         go to state 169
    block_structure     go to state 170
    const               go to state 12
    declaration         go to state 171
    assignment          go to state 172
    initialization      go to state 173
    function_call       go to state 174
    non_if_statements   go to state 197
    matched_if_in_loop  go to state 266
    loop_block          go to state 267
    for                 go to state 175
    while               go to state 176
    do_while            go to state 177
    switch              go to state 178


state 251

  140 do_while: DO_KEYWORD OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE WHILE_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS SEMICOLON

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    BOOLEAN_LITERAL      shift, and go to state 70
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call           go to state 71
    array_element           go to state 72
    arithmetic_expr         go to state 73
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 268
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    numeric_literal         go to state 75


state 252

  105 matched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD matched_statement .

    $default  reduce using rule 105 (matched_statement)


state 253

  110 unmatched_statement: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_statement ELSE_KEYWORD unmatched_statement .

    $default  reduce using rule 110 (unmatched_statement)


state 254

   38 initialization: const type_identifier OPENING_SQUARE_BRACKETS INTEGER_LITERAL CLOSING_SQUARE_BRACKETS . ASSIGNMENT OPENING_SQUARE_BRACKETS expr_list CLOSING_SQUARE_BRACKETS

    ASSIGNMENT  shift, and go to state 129


state 255

  136 for: FOR_KEYWORD OPENING_PARENTHESIS loop_start SEMICOLON bool_expr SEMICOLON assignment . CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    CLOSING_PARENTHESIS  shift, and go to state 269


state 256

  139 while: WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE .

    $default  reduce using rule 139 (while)


state 257

   94 literal: BOOLEAN_LITERAL .

    $default  reduce using rule 94 (literal)


state 258

  146 case_statement: CASE_KEYWORD IDENTIFIER . COLON body

    COLON  shift, and go to state 270


state 259

  147 case_statement: CASE_KEYWORD literal . COLON body

    COLON  shift, and go to state 271


state 260

   91 literal: numeric_literal .

    $default  reduce using rule 91 (literal)


state 261

  142 switch: SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list DEFAULT_KEYWORD . COLON body CLOSING_CURLY_BRACE

    COLON  shift, and go to state 272


state 262

  141 switch: SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list CLOSING_CURLY_BRACE .

    $default  reduce using rule 141 (switch)


state 263

  143 case_list: case_list case_statement .

    $default  reduce using rule 143 (case_list)


state 264

  113 matched_if_in_loop: IF_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block ELSE_KEYWORD matched_if_in_loop

    OPENING_PARENTHESIS  shift, and go to state 273


state 265

   29 block_structure: OPENING_CURLY_BRACE . body CLOSING_CURLY_BRACE
  117 loop_block: OPENING_CURLY_BRACE . body break_or_continue CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 13 (body)]
    INT_TYPE_KEYWORD     reduce using rule 13 (body)
    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   reduce using rule 13 (body)
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  reduce using rule 13 (body)
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    reduce using rule 13 (body)
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    reduce using rule 13 (body)
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]
    IF_KEYWORD           [reduce using rule 13 (body)]
    FOR_KEYWORD          [reduce using rule 13 (body)]
    WHILE_KEYWORD        [reduce using rule 13 (body)]
    SWITCH_KEYWORD       [reduce using rule 13 (body)]
    DO_KEYWORD           [reduce using rule 13 (body)]
    CONST_KEYWORD        [reduce using rule 13 (body)]
    OPENING_CURLY_BRACE  [reduce using rule 13 (body)]
    UNRECOGNIZED_TOKEN   [reduce using rule 13 (body)]
    RESERVED_IDENTIFIER  [reduce using rule 13 (body)]
    $default             reduce using rule 13 (body)

    body                       go to state 274
    statement                  go to state 109
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 266

  116 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_if_in_loop . ELSE_KEYWORD unmatched_if_in_loop

    ELSE_KEYWORD  shift, and go to state 275


state 267

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block . ELSE_KEYWORD matched_if_in_loop
  115 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block .

    ELSE_KEYWORD  shift, and go to state 276

    $default  reduce using rule 115 (unmatched_if_in_loop)


state 268

  140 do_while: DO_KEYWORD OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE WHILE_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS SEMICOLON

    CLOSING_PARENTHESIS  shift, and go to state 277


state 269

  136 for: FOR_KEYWORD OPENING_PARENTHESIS loop_start SEMICOLON bool_expr SEMICOLON assignment CLOSING_PARENTHESIS . OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE

    OPENING_CURLY_BRACE  shift, and go to state 278


state 270

  146 case_statement: CASE_KEYWORD IDENTIFIER COLON . body

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 13 (body)]
    INT_TYPE_KEYWORD     reduce using rule 13 (body)
    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   reduce using rule 13 (body)
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  reduce using rule 13 (body)
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    reduce using rule 13 (body)
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    reduce using rule 13 (body)
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]
    IF_KEYWORD           [reduce using rule 13 (body)]
    FOR_KEYWORD          [reduce using rule 13 (body)]
    WHILE_KEYWORD        [reduce using rule 13 (body)]
    SWITCH_KEYWORD       [reduce using rule 13 (body)]
    DO_KEYWORD           [reduce using rule 13 (body)]
    CONST_KEYWORD        [reduce using rule 13 (body)]
    OPENING_CURLY_BRACE  [reduce using rule 13 (body)]
    UNRECOGNIZED_TOKEN   [reduce using rule 13 (body)]
    RESERVED_IDENTIFIER  [reduce using rule 13 (body)]
    $default             reduce using rule 13 (body)

    body                       go to state 279
    statement                  go to state 109
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 271

  147 case_statement: CASE_KEYWORD literal COLON . body

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 13 (body)]
    INT_TYPE_KEYWORD     reduce using rule 13 (body)
    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   reduce using rule 13 (body)
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  reduce using rule 13 (body)
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    reduce using rule 13 (body)
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    reduce using rule 13 (body)
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]
    IF_KEYWORD           [reduce using rule 13 (body)]
    FOR_KEYWORD          [reduce using rule 13 (body)]
    WHILE_KEYWORD        [reduce using rule 13 (body)]
    SWITCH_KEYWORD       [reduce using rule 13 (body)]
    DO_KEYWORD           [reduce using rule 13 (body)]
    CONST_KEYWORD        [reduce using rule 13 (body)]
    OPENING_CURLY_BRACE  [reduce using rule 13 (body)]
    UNRECOGNIZED_TOKEN   [reduce using rule 13 (body)]
    RESERVED_IDENTIFIER  [reduce using rule 13 (body)]
    $default             reduce using rule 13 (body)

    body                       go to state 280
    statement                  go to state 109
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 272

  142 switch: SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list DEFAULT_KEYWORD COLON . body CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 13 (body)]
    INT_TYPE_KEYWORD     reduce using rule 13 (body)
    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   reduce using rule 13 (body)
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  reduce using rule 13 (body)
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    reduce using rule 13 (body)
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    reduce using rule 13 (body)
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]
    IF_KEYWORD           [reduce using rule 13 (body)]
    FOR_KEYWORD          [reduce using rule 13 (body)]
    WHILE_KEYWORD        [reduce using rule 13 (body)]
    SWITCH_KEYWORD       [reduce using rule 13 (body)]
    DO_KEYWORD           [reduce using rule 13 (body)]
    CONST_KEYWORD        [reduce using rule 13 (body)]
    OPENING_CURLY_BRACE  [reduce using rule 13 (body)]
    UNRECOGNIZED_TOKEN   [reduce using rule 13 (body)]
    RESERVED_IDENTIFIER  [reduce using rule 13 (body)]
    $default             reduce using rule 13 (body)

    body                       go to state 281
    statement                  go to state 109
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 273

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS loop_block ELSE_KEYWORD matched_if_in_loop

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    BOOLEAN_LITERAL      shift, and go to state 70
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call           go to state 71
    array_element           go to state 72
    arithmetic_expr         go to state 73
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 282
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    numeric_literal         go to state 75


state 274

   11 body: body . statement
   29 block_structure: OPENING_CURLY_BRACE body . CLOSING_CURLY_BRACE
  117 loop_block: OPENING_CURLY_BRACE body . break_or_continue CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    BREAK_KEYWORD        shift, and go to state 283
    CONTINUE_KEYWORD     shift, and go to state 284
    OPENING_CURLY_BRACE  shift, and go to state 105
    CLOSING_CURLY_BRACE  shift, and go to state 205
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    CLOSING_CURLY_BRACE  [reduce using rule 133 (break_or_continue)]
    $default             reduce using rule 31 (const)

    statement                  go to state 160
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    break_or_continue          go to state 285
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 275

  116 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_if_in_loop ELSE_KEYWORD . unmatched_if_in_loop

    IF_KEYWORD  shift, and go to state 286

    unmatched_if_in_loop  go to state 287


state 276

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block ELSE_KEYWORD . matched_if_in_loop

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 264
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    non_if_statement    go to state 110
    error_token         go to state 169
    block_structure     go to state 170
    const               go to state 12
    declaration         go to state 171
    assignment          go to state 172
    initialization      go to state 173
    function_call       go to state 174
    non_if_statements   go to state 197
    matched_if_in_loop  go to state 288
    for                 go to state 175
    while               go to state 176
    do_while            go to state 177
    switch              go to state 178


state 277

  140 do_while: DO_KEYWORD OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . SEMICOLON

    SEMICOLON  shift, and go to state 289


state 278

  136 for: FOR_KEYWORD OPENING_PARENTHESIS loop_start SEMICOLON bool_expr SEMICOLON assignment CLOSING_PARENTHESIS OPENING_CURLY_BRACE . loop_body_statements CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 196
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    non_if_statements          go to state 197
    if_in_loop                 go to state 198
    matched_if_in_loop         go to state 199
    unmatched_if_in_loop       go to state 200
    loop_body_statement        go to state 201
    non_loop_non_if_statement  go to state 202
    loop_statement             go to state 203
    loop_body_statements       go to state 290
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 279

   11 body: body . statement
  146 case_statement: CASE_KEYWORD IDENTIFIER COLON body .

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    CASE_KEYWORD         reduce using rule 146 (case_statement)
    DEFAULT_KEYWORD      reduce using rule 146 (case_statement)
    CLOSING_CURLY_BRACE  reduce using rule 146 (case_statement)
    $default             reduce using rule 31 (const)

    statement                  go to state 160
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 280

   11 body: body . statement
  147 case_statement: CASE_KEYWORD literal COLON body .

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    CASE_KEYWORD         reduce using rule 147 (case_statement)
    DEFAULT_KEYWORD      reduce using rule 147 (case_statement)
    CLOSING_CURLY_BRACE  reduce using rule 147 (case_statement)
    $default             reduce using rule 31 (const)

    statement                  go to state 160
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 281

   11 body: body . statement
  142 switch: SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list DEFAULT_KEYWORD COLON body . CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    CLOSING_CURLY_BRACE  shift, and go to state 291
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    statement                  go to state 160
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 282

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS loop_block ELSE_KEYWORD matched_if_in_loop

    CLOSING_PARENTHESIS  shift, and go to state 292


state 283

  131 break_or_continue: BREAK_KEYWORD . SEMICOLON

    SEMICOLON  shift, and go to state 293


state 284

  132 break_or_continue: CONTINUE_KEYWORD . SEMICOLON

    SEMICOLON  shift, and go to state 294


state 285

  117 loop_block: OPENING_CURLY_BRACE body break_or_continue . CLOSING_CURLY_BRACE

    CLOSING_CURLY_BRACE  shift, and go to state 295


state 286

  115 unmatched_if_in_loop: IF_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block
  116                     | IF_KEYWORD . OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_if_in_loop ELSE_KEYWORD unmatched_if_in_loop

    OPENING_PARENTHESIS  shift, and go to state 296


state 287

  116 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS matched_if_in_loop ELSE_KEYWORD unmatched_if_in_loop .

    $default  reduce using rule 116 (unmatched_if_in_loop)


state 288

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block ELSE_KEYWORD matched_if_in_loop .

    $default  reduce using rule 113 (matched_if_in_loop)


state 289

  140 do_while: DO_KEYWORD OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE WHILE_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS SEMICOLON .

    $default  reduce using rule 140 (do_while)


state 290

  135 loop_body_statements: loop_body_statements . loop_body_statement
  136 for: FOR_KEYWORD OPENING_PARENTHESIS loop_start SEMICOLON bool_expr SEMICOLON assignment CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements . CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 196
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    CLOSING_CURLY_BRACE  shift, and go to state 297
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    non_if_statements          go to state 197
    if_in_loop                 go to state 198
    matched_if_in_loop         go to state 199
    unmatched_if_in_loop       go to state 200
    loop_body_statement        go to state 227
    non_loop_non_if_statement  go to state 202
    loop_statement             go to state 203
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 291

  142 switch: SWITCH_KEYWORD OPENING_PARENTHESIS expr CLOSING_PARENTHESIS OPENING_CURLY_BRACE case_list DEFAULT_KEYWORD COLON body CLOSING_CURLY_BRACE .

    $default  reduce using rule 142 (switch)


state 292

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . loop_block ELSE_KEYWORD matched_if_in_loop

    OPENING_CURLY_BRACE  shift, and go to state 298

    loop_block  go to state 299


state 293

  131 break_or_continue: BREAK_KEYWORD SEMICOLON .

    $default  reduce using rule 131 (break_or_continue)


state 294

  132 break_or_continue: CONTINUE_KEYWORD SEMICOLON .

    $default  reduce using rule 132 (break_or_continue)


state 295

  117 loop_block: OPENING_CURLY_BRACE body break_or_continue CLOSING_CURLY_BRACE .

    $default  reduce using rule 117 (loop_block)


state 296

  115 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS loop_block
  116                     | IF_KEYWORD OPENING_PARENTHESIS . bool_expr CLOSING_PARENTHESIS matched_if_in_loop ELSE_KEYWORD unmatched_if_in_loop

    INTEGER_LITERAL      shift, and go to state 34
    FLOAT_LITERAL        shift, and go to state 35
    BOOLEAN_LITERAL      shift, and go to state 70
    IDENTIFIER           shift, and go to state 39
    NOT_KEYWORD          shift, and go to state 40
    OPENING_PARENTHESIS  shift, and go to state 41
    MINUS                shift, and go to state 42

    function_call           go to state 71
    array_element           go to state 72
    arithmetic_expr         go to state 73
    arithmetic_term         go to state 48
    arithmetic_factor       go to state 49
    postfix_expr            go to state 50
    primary_expr            go to state 51
    bool_expr               go to state 300
    logical_or_expression   go to state 53
    logical_and_expression  go to state 54
    logical_not_expression  go to state 55
    comparison_expr         go to state 56
    numeric_literal         go to state 75


state 297

  136 for: FOR_KEYWORD OPENING_PARENTHESIS loop_start SEMICOLON bool_expr SEMICOLON assignment CLOSING_PARENTHESIS OPENING_CURLY_BRACE loop_body_statements CLOSING_CURLY_BRACE .

    $default  reduce using rule 136 (for)


state 298

  117 loop_block: OPENING_CURLY_BRACE . body break_or_continue CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    IDENTIFIER           [reduce using rule 13 (body)]
    INT_TYPE_KEYWORD     reduce using rule 13 (body)
    INT_TYPE_KEYWORD     [reduce using rule 31 (const)]
    FLOAT_TYPE_KEYWORD   reduce using rule 13 (body)
    FLOAT_TYPE_KEYWORD   [reduce using rule 31 (const)]
    STRING_TYPE_KEYWORD  reduce using rule 13 (body)
    STRING_TYPE_KEYWORD  [reduce using rule 31 (const)]
    CHAR_TYPE_KEYWORD    reduce using rule 13 (body)
    CHAR_TYPE_KEYWORD    [reduce using rule 31 (const)]
    BOOL_TYPE_KEYWORD    reduce using rule 13 (body)
    BOOL_TYPE_KEYWORD    [reduce using rule 31 (const)]
    IF_KEYWORD           [reduce using rule 13 (body)]
    FOR_KEYWORD          [reduce using rule 13 (body)]
    WHILE_KEYWORD        [reduce using rule 13 (body)]
    SWITCH_KEYWORD       [reduce using rule 13 (body)]
    DO_KEYWORD           [reduce using rule 13 (body)]
    CONST_KEYWORD        [reduce using rule 13 (body)]
    OPENING_CURLY_BRACE  [reduce using rule 13 (body)]
    UNRECOGNIZED_TOKEN   [reduce using rule 13 (body)]
    RESERVED_IDENTIFIER  [reduce using rule 13 (body)]
    $default             reduce using rule 13 (body)

    body                       go to state 301
    statement                  go to state 109
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 299

  113 matched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block . ELSE_KEYWORD matched_if_in_loop

    ELSE_KEYWORD  shift, and go to state 276


state 300

  115 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS loop_block
  116                     | IF_KEYWORD OPENING_PARENTHESIS bool_expr . CLOSING_PARENTHESIS matched_if_in_loop ELSE_KEYWORD unmatched_if_in_loop

    CLOSING_PARENTHESIS  shift, and go to state 302


state 301

   11 body: body . statement
  117 loop_block: OPENING_CURLY_BRACE body . break_or_continue CLOSING_CURLY_BRACE

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 100
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    BREAK_KEYWORD        shift, and go to state 283
    CONTINUE_KEYWORD     shift, and go to state 284
    OPENING_CURLY_BRACE  shift, and go to state 105
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    CLOSING_CURLY_BRACE  reduce using rule 133 (break_or_continue)
    $default             reduce using rule 31 (const)

    statement                  go to state 160
    non_if_statement           go to state 110
    error_token                go to state 111
    block_structure            go to state 112
    const                      go to state 12
    declaration                go to state 113
    assignment                 go to state 114
    initialization             go to state 115
    function_call              go to state 116
    if                         go to state 117
    matched_statement          go to state 118
    non_if_statements          go to state 119
    unmatched_statement        go to state 120
    non_loop_non_if_statement  go to state 121
    loop_statement             go to state 122
    break_or_continue          go to state 285
    for                        go to state 123
    while                      go to state 124
    do_while                   go to state 125
    switch                     go to state 126


state 302

  115 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . loop_block
  116                     | IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS . matched_if_in_loop ELSE_KEYWORD unmatched_if_in_loop

    IDENTIFIER           shift, and go to state 99
    IF_KEYWORD           shift, and go to state 264
    FOR_KEYWORD          shift, and go to state 101
    WHILE_KEYWORD        shift, and go to state 102
    SWITCH_KEYWORD       shift, and go to state 103
    DO_KEYWORD           shift, and go to state 104
    CONST_KEYWORD        shift, and go to state 10
    OPENING_CURLY_BRACE  shift, and go to state 265
    UNRECOGNIZED_TOKEN   shift, and go to state 106
    RESERVED_IDENTIFIER  shift, and go to state 107

    $default  reduce using rule 31 (const)

    non_if_statement    go to state 110
    error_token         go to state 169
    block_structure     go to state 170
    const               go to state 12
    declaration         go to state 171
    assignment          go to state 172
    initialization      go to state 173
    function_call       go to state 174
    non_if_statements   go to state 197
    matched_if_in_loop  go to state 266
    loop_block          go to state 303
    for                 go to state 175
    while               go to state 176
    do_while            go to state 177
    switch              go to state 178


state 303

  115 unmatched_if_in_loop: IF_KEYWORD OPENING_PARENTHESIS bool_expr CLOSING_PARENTHESIS loop_block .

    $default  reduce using rule 115 (unmatched_if_in_loop)
